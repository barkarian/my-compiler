Terminals unused in grammar

    KW_REAL
    KW_NIL


Rules useless in parser due to conflicts

   23 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'


State 138 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}'

    2 decl_list: decl_list decl
    3          | decl

    4 decl: constDeclaration ';'
    5     | varDeclaration ';'
    6     | functionDeclaration ';'

    7 decl_list_body: %empty
    8               | decl_list_body declInsideBody

    9 declInsideBody: constDeclaration ';'
   10               | varDeclaration ';'

   11 body: decl_list_body statementList

   12 constDeclaration: KW_CONST constAssignments dataType

   13 constAssignments: assignment
   14                 | constAssignments ',' assignment

   15 varDeclaration: KW_VAR varAssignments dataType

   16 varAssignments: varAssignment
   17               | varAssignments ',' varAssignment

   18 varAssignment: assignment
   19              | IDENTIFIER
   20              | IDENTIFIER '[' INTEGER ']'
   21              | IDENTIFIER '[' ']'

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'
   23                    | KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

   24 functionParameters: %empty
   25                   | IDENTIFIER dataType
   26                   | functionParameters ',' IDENTIFIER dataType

   27 assignment: IDENTIFIER ASSIGN expr
   28           | IDENTIFIER '[' INTEGER ']' ASSIGN expr
   29           | IDENTIFIER '[' ']' ASSIGN expr

   30 functionInputs: expr
   31               | functionInputs ',' expr

   32 expr: value
   33     | IDENTIFIER
   34     | IDENTIFIER '[' expr ']'
   35     | IDENTIFIER '(' ')'
   36     | IDENTIFIER '(' functionInputs ')'
   37     | expr '+' expr
   38     | expr '-' expr
   39     | expr '*' expr
   40     | expr '/' expr
   41     | expr '%' expr
   42     | expr POWER expr
   43     | expr EQ expr
   44     | expr NEQ expr
   45     | expr LE expr
   46     | expr LT expr
   47     | expr GE expr
   48     | expr GT expr
   49     | expr KW_AND expr
   50     | expr KW_OR expr
   51     | KW_NOT expr
   52     | '+' expr
   53     | '-' expr
   54     | '(' expr ')'

   55 value: INTEGER
   56      | BOOL
   57      | REAL
   58      | STRING

   59 dataType: KW_INT
   60         | KW_BOOL
   61         | KW_STRING

   62 statementList: statementComplex
   63              | statementList statementComplex

   64 statementComplexMinusIf: ';'
   65                        | statement ';'
   66                        | '{' statementList '}'
   67                        | statementFor
   68                        | statementWhile
   69                        | KW_BREAK ';'
   70                        | KW_CONTINUE ';'
   71                        | KW_RETURN expr ';'
   72                        | KW_RETURN ';'

   73 statementComplex: statementIf
   74                 | statementComplexMinusIf

   75 statement: IDENTIFIER ASSIGN expr
   76          | expr

   77 statementFor: KW_FOR '(' statement ';' expr ';' statement ')' statementComplex

   78 statementWhile: KW_WHILE '(' expr ')' statementComplex

   79 statementIf: KW_IF '(' expr ')' statementComplex
   80            | KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | KW_IF '(' expr ')' statementComplex KW_ELSE statementIf


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 41
    '(' (40) 1 22 23 35 36 54 77 78 79 80 81
    ')' (41) 1 22 23 35 36 54 77 78 79 80 81
    '*' (42) 39
    '+' (43) 37 52
    ',' (44) 14 17 26 31
    '-' (45) 38 53
    '/' (47) 40
    ';' (59) 4 5 6 9 10 64 65 69 70 71 72 77
    '[' (91) 20 21 28 29 34
    ']' (93) 20 21 28 29 34
    '{' (123) 1 22 23 66
    '}' (125) 1 22 23 66
    error (256)
    KW_INT (258) 59
    KW_REAL (259)
    KW_STRING (260) 61
    KW_BOOL (261) 60
    BOOL <crepr> (262) 56
    KW_VAR (263) 15
    KW_CONST (264) 12
    KW_IF (265) 79 80 81
    KW_ELSE (266) 80 81
    KW_FOR (267) 77
    KW_WHILE (268) 78
    KW_BREAK (269) 69
    KW_CONTINUE (270) 70
    KW_FUNC (271) 1 22 23
    KW_NIL (272)
    KW_AND (273) 49
    KW_OR (274) 50
    KW_NOT (275) 51
    KW_RETURN (276) 71 72
    KW_BEGIN (277) 1
    ASSIGN (278) 27 28 29 75
    STRING <crepr> (279) 58
    INTEGER <crepr> (280) 20 28 55
    REAL <crepr> (281) 57
    IDENTIFIER <crepr> (282) 19 20 21 22 23 25 26 27 28 29 33 34 35 36 75
    POWER (283) 42
    EQ (284) 43
    NEQ (285) 44
    LT (286) 46
    LE (287) 45
    GT (288) 48
    GE (289) 47
    REDUCE_PRIORITY (290)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1
        on right: 0
    decl_list <crepr> (51)
        on left: 2 3
        on right: 1 2
    decl <crepr> (52)
        on left: 4 5 6
        on right: 2 3
    decl_list_body <crepr> (53)
        on left: 7 8
        on right: 8 11
    declInsideBody <crepr> (54)
        on left: 9 10
        on right: 8
    body <crepr> (55)
        on left: 11
        on right: 1 22 23
    constDeclaration <crepr> (56)
        on left: 12
        on right: 4 9
    constAssignments <crepr> (57)
        on left: 13 14
        on right: 12 14
    varDeclaration <crepr> (58)
        on left: 15
        on right: 5 10
    varAssignments <crepr> (59)
        on left: 16 17
        on right: 15 17
    varAssignment <crepr> (60)
        on left: 18 19 20 21
        on right: 16 17
    functionDeclaration <crepr> (61)
        on left: 22 23
        on right: 6
    functionParameters <crepr> (62)
        on left: 24 25 26
        on right: 22 23 26
    assignment <crepr> (63)
        on left: 27 28 29
        on right: 13 14 18
    functionInputs <crepr> (64)
        on left: 30 31
        on right: 31 36
    expr <crepr> (65)
        on left: 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
        on right: 27 28 29 30 31 34 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 71 75 76 77 78 79 80 81
    value <crepr> (66)
        on left: 55 56 57 58
        on right: 32
    dataType <crepr> (67)
        on left: 59 60 61
        on right: 12 15 22 23 25 26
    statementList <crepr> (68)
        on left: 62 63
        on right: 11 63 66
    statementComplexMinusIf <crepr> (69)
        on left: 64 65 66 67 68 69 70 71 72
        on right: 74 80
    statementComplex <crepr> (70)
        on left: 73 74
        on right: 62 63 77 78 79 80 81
    statement <crepr> (71)
        on left: 75 76
        on right: 65 77
    statementFor <crepr> (72)
        on left: 77
        on right: 67
    statementWhile <crepr> (73)
        on left: 78
        on right: 68
    statementIf <crepr> (74)
        on left: 79 80 81
        on right: 73 81


State 0

    0 $accept: . program $end
    1 program: . decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}'
    2 decl_list: . decl_list decl
    3          | . decl
    4 decl: . constDeclaration ';'
    5     | . varDeclaration ';'
    6     | . functionDeclaration ';'
   12 constDeclaration: . KW_CONST constAssignments dataType
   15 varDeclaration: . KW_VAR varAssignments dataType
   22 functionDeclaration: . KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'
   23                    | . KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    KW_VAR    shift, and go to state 1
    KW_CONST  shift, and go to state 2
    KW_FUNC   shift, and go to state 3

    program              go to state 4
    decl_list            go to state 5
    decl                 go to state 6
    constDeclaration     go to state 7
    varDeclaration       go to state 8
    functionDeclaration  go to state 9


State 1

   15 varDeclaration: KW_VAR . varAssignments dataType
   16 varAssignments: . varAssignment
   17               | . varAssignments ',' varAssignment
   18 varAssignment: . assignment
   19              | . IDENTIFIER
   20              | . IDENTIFIER '[' INTEGER ']'
   21              | . IDENTIFIER '[' ']'
   27 assignment: . IDENTIFIER ASSIGN expr
   28           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   29           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 10

    varAssignments  go to state 11
    varAssignment   go to state 12
    assignment      go to state 13


State 2

   12 constDeclaration: KW_CONST . constAssignments dataType
   13 constAssignments: . assignment
   14                 | . constAssignments ',' assignment
   27 assignment: . IDENTIFIER ASSIGN expr
   28           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   29           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 14

    constAssignments  go to state 15
    assignment        go to state 16


State 3

   22 functionDeclaration: KW_FUNC . IDENTIFIER '(' functionParameters ')' dataType '{' body '}'
   23                    | KW_FUNC . IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    IDENTIFIER  shift, and go to state 17


State 4

    0 $accept: program . $end

    $end  shift, and go to state 18


State 5

    1 program: decl_list . KW_FUNC KW_BEGIN '(' ')' '{' body '}'
    2 decl_list: decl_list . decl
    4 decl: . constDeclaration ';'
    5     | . varDeclaration ';'
    6     | . functionDeclaration ';'
   12 constDeclaration: . KW_CONST constAssignments dataType
   15 varDeclaration: . KW_VAR varAssignments dataType
   22 functionDeclaration: . KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'
   23                    | . KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    KW_VAR    shift, and go to state 1
    KW_CONST  shift, and go to state 2
    KW_FUNC   shift, and go to state 19

    decl                 go to state 20
    constDeclaration     go to state 7
    varDeclaration       go to state 8
    functionDeclaration  go to state 9


State 6

    3 decl_list: decl .

    $default  reduce using rule 3 (decl_list)


State 7

    4 decl: constDeclaration . ';'

    ';'  shift, and go to state 21


State 8

    5 decl: varDeclaration . ';'

    ';'  shift, and go to state 22


State 9

    6 decl: functionDeclaration . ';'

    ';'  shift, and go to state 23


State 10

   19 varAssignment: IDENTIFIER .  [KW_INT, KW_STRING, KW_BOOL, ',']
   20              | IDENTIFIER . '[' INTEGER ']'
   21              | IDENTIFIER . '[' ']'
   27 assignment: IDENTIFIER . ASSIGN expr
   28           | IDENTIFIER . '[' INTEGER ']' ASSIGN expr
   29           | IDENTIFIER . '[' ']' ASSIGN expr

    ASSIGN  shift, and go to state 24
    '['     shift, and go to state 25

    $default  reduce using rule 19 (varAssignment)


State 11

   15 varDeclaration: KW_VAR varAssignments . dataType
   17 varAssignments: varAssignments . ',' varAssignment
   59 dataType: . KW_INT
   60         | . KW_BOOL
   61         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28
    ','        shift, and go to state 29

    dataType  go to state 30


State 12

   16 varAssignments: varAssignment .

    $default  reduce using rule 16 (varAssignments)


State 13

   18 varAssignment: assignment .

    $default  reduce using rule 18 (varAssignment)


State 14

   27 assignment: IDENTIFIER . ASSIGN expr
   28           | IDENTIFIER . '[' INTEGER ']' ASSIGN expr
   29           | IDENTIFIER . '[' ']' ASSIGN expr

    ASSIGN  shift, and go to state 24
    '['     shift, and go to state 31


State 15

   12 constDeclaration: KW_CONST constAssignments . dataType
   14 constAssignments: constAssignments . ',' assignment
   59 dataType: . KW_INT
   60         | . KW_BOOL
   61         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28
    ','        shift, and go to state 32

    dataType  go to state 33


State 16

   13 constAssignments: assignment .

    $default  reduce using rule 13 (constAssignments)


State 17

   22 functionDeclaration: KW_FUNC IDENTIFIER . '(' functionParameters ')' dataType '{' body '}'
   23                    | KW_FUNC IDENTIFIER . '(' functionParameters ')' dataType '{' body '}'

    '('  shift, and go to state 34


State 18

    0 $accept: program $end .

    $default  accept


State 19

    1 program: decl_list KW_FUNC . KW_BEGIN '(' ')' '{' body '}'
   22 functionDeclaration: KW_FUNC . IDENTIFIER '(' functionParameters ')' dataType '{' body '}'
   23                    | KW_FUNC . IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    KW_BEGIN    shift, and go to state 35
    IDENTIFIER  shift, and go to state 17


State 20

    2 decl_list: decl_list decl .

    $default  reduce using rule 2 (decl_list)


State 21

    4 decl: constDeclaration ';' .

    $default  reduce using rule 4 (decl)


State 22

    5 decl: varDeclaration ';' .

    $default  reduce using rule 5 (decl)


State 23

    6 decl: functionDeclaration ';' .

    $default  reduce using rule 6 (decl)


State 24

   27 assignment: IDENTIFIER ASSIGN . expr
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 45
    value  go to state 46


State 25

   20 varAssignment: IDENTIFIER '[' . INTEGER ']'
   21              | IDENTIFIER '[' . ']'
   28 assignment: IDENTIFIER '[' . INTEGER ']' ASSIGN expr
   29           | IDENTIFIER '[' . ']' ASSIGN expr

    INTEGER  shift, and go to state 47
    ']'      shift, and go to state 48


State 26

   59 dataType: KW_INT .

    $default  reduce using rule 59 (dataType)


State 27

   61 dataType: KW_STRING .

    $default  reduce using rule 61 (dataType)


State 28

   60 dataType: KW_BOOL .

    $default  reduce using rule 60 (dataType)


State 29

   17 varAssignments: varAssignments ',' . varAssignment
   18 varAssignment: . assignment
   19              | . IDENTIFIER
   20              | . IDENTIFIER '[' INTEGER ']'
   21              | . IDENTIFIER '[' ']'
   27 assignment: . IDENTIFIER ASSIGN expr
   28           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   29           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 10

    varAssignment  go to state 49
    assignment     go to state 13


State 30

   15 varDeclaration: KW_VAR varAssignments dataType .

    $default  reduce using rule 15 (varDeclaration)


State 31

   28 assignment: IDENTIFIER '[' . INTEGER ']' ASSIGN expr
   29           | IDENTIFIER '[' . ']' ASSIGN expr

    INTEGER  shift, and go to state 50
    ']'      shift, and go to state 51


State 32

   14 constAssignments: constAssignments ',' . assignment
   27 assignment: . IDENTIFIER ASSIGN expr
   28           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   29           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 14

    assignment  go to state 52


State 33

   12 constDeclaration: KW_CONST constAssignments dataType .

    $default  reduce using rule 12 (constDeclaration)


State 34

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' . functionParameters ')' dataType '{' body '}'
   23                    | KW_FUNC IDENTIFIER '(' . functionParameters ')' dataType '{' body '}'
   24 functionParameters: . %empty  [')', ',']
   25                   | . IDENTIFIER dataType
   26                   | . functionParameters ',' IDENTIFIER dataType

    IDENTIFIER  shift, and go to state 53

    $default  reduce using rule 24 (functionParameters)

    functionParameters  go to state 54


State 35

    1 program: decl_list KW_FUNC KW_BEGIN . '(' ')' '{' body '}'

    '('  shift, and go to state 55


State 36

   56 value: BOOL .

    $default  reduce using rule 56 (value)


State 37

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   51     | KW_NOT . expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 56
    value  go to state 46


State 38

   58 value: STRING .

    $default  reduce using rule 58 (value)


State 39

   55 value: INTEGER .

    $default  reduce using rule 55 (value)


State 40

   57 value: REAL .

    $default  reduce using rule 57 (value)


State 41

   33 expr: IDENTIFIER .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   34     | IDENTIFIER . '[' expr ']'
   35     | IDENTIFIER . '(' ')'
   36     | IDENTIFIER . '(' functionInputs ')'

    '('  shift, and go to state 57
    '['  shift, and go to state 58

    $default  reduce using rule 33 (expr)


State 42

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   52     | '+' . expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 59
    value  go to state 46


State 43

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   53     | '-' . expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 60
    value  go to state 46


State 44

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   54     | '(' . expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 61
    value  go to state 46


State 45

   27 assignment: IDENTIFIER ASSIGN expr .  [KW_INT, KW_STRING, KW_BOOL, ',']
   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 27 (assignment)


State 46

   32 expr: value .

    $default  reduce using rule 32 (expr)


State 47

   20 varAssignment: IDENTIFIER '[' INTEGER . ']'
   28 assignment: IDENTIFIER '[' INTEGER . ']' ASSIGN expr

    ']'  shift, and go to state 76


State 48

   21 varAssignment: IDENTIFIER '[' ']' .  [KW_INT, KW_STRING, KW_BOOL, ',']
   29 assignment: IDENTIFIER '[' ']' . ASSIGN expr

    ASSIGN  shift, and go to state 77

    $default  reduce using rule 21 (varAssignment)


State 49

   17 varAssignments: varAssignments ',' varAssignment .

    $default  reduce using rule 17 (varAssignments)


State 50

   28 assignment: IDENTIFIER '[' INTEGER . ']' ASSIGN expr

    ']'  shift, and go to state 78


State 51

   29 assignment: IDENTIFIER '[' ']' . ASSIGN expr

    ASSIGN  shift, and go to state 77


State 52

   14 constAssignments: constAssignments ',' assignment .

    $default  reduce using rule 14 (constAssignments)


State 53

   25 functionParameters: IDENTIFIER . dataType
   59 dataType: . KW_INT
   60         | . KW_BOOL
   61         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    dataType  go to state 79


State 54

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters . ')' dataType '{' body '}'
   23                    | KW_FUNC IDENTIFIER '(' functionParameters . ')' dataType '{' body '}'
   26 functionParameters: functionParameters . ',' IDENTIFIER dataType

    ')'  shift, and go to state 80
    ','  shift, and go to state 81


State 55

    1 program: decl_list KW_FUNC KW_BEGIN '(' . ')' '{' body '}'

    ')'  shift, and go to state 82


State 56

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   51     | KW_NOT expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']

    $default  reduce using rule 51 (expr)

    Conflict between rule 51 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 51 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 51 and token POWER resolved as reduce (POWER < KW_NOT).
    Conflict between rule 51 and token EQ resolved as reduce (EQ < KW_NOT).
    Conflict between rule 51 and token NEQ resolved as reduce (NEQ < KW_NOT).
    Conflict between rule 51 and token LT resolved as reduce (LT < KW_NOT).
    Conflict between rule 51 and token LE resolved as reduce (LE < KW_NOT).
    Conflict between rule 51 and token GT resolved as reduce (GT < KW_NOT).
    Conflict between rule 51 and token GE resolved as reduce (GE < KW_NOT).
    Conflict between rule 51 and token '+' resolved as reduce ('+' < KW_NOT).
    Conflict between rule 51 and token '-' resolved as reduce ('-' < KW_NOT).
    Conflict between rule 51 and token '*' resolved as reduce ('*' < KW_NOT).
    Conflict between rule 51 and token '/' resolved as reduce ('/' < KW_NOT).
    Conflict between rule 51 and token '%' resolved as reduce ('%' < KW_NOT).


State 57

   30 functionInputs: . expr
   31               | . functionInputs ',' expr
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   35     | IDENTIFIER '(' . ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   36     | IDENTIFIER '(' . functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44
    ')'         shift, and go to state 83

    functionInputs  go to state 84
    expr            go to state 85
    value           go to state 46


State 58

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   34     | IDENTIFIER '[' . expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 86
    value  go to state 46


State 59

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   52     | '+' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']

    $default  reduce using rule 52 (expr)

    Conflict between rule 52 and token KW_AND resolved as reduce (KW_AND < REDUCE_PRIORITY).
    Conflict between rule 52 and token KW_OR resolved as reduce (KW_OR < REDUCE_PRIORITY).
    Conflict between rule 52 and token POWER resolved as reduce (POWER < REDUCE_PRIORITY).
    Conflict between rule 52 and token EQ resolved as reduce (EQ < REDUCE_PRIORITY).
    Conflict between rule 52 and token NEQ resolved as reduce (NEQ < REDUCE_PRIORITY).
    Conflict between rule 52 and token LT resolved as reduce (LT < REDUCE_PRIORITY).
    Conflict between rule 52 and token LE resolved as reduce (LE < REDUCE_PRIORITY).
    Conflict between rule 52 and token GT resolved as reduce (GT < REDUCE_PRIORITY).
    Conflict between rule 52 and token GE resolved as reduce (GE < REDUCE_PRIORITY).
    Conflict between rule 52 and token '+' resolved as reduce ('+' < REDUCE_PRIORITY).
    Conflict between rule 52 and token '-' resolved as reduce ('-' < REDUCE_PRIORITY).
    Conflict between rule 52 and token '*' resolved as reduce ('*' < REDUCE_PRIORITY).
    Conflict between rule 52 and token '/' resolved as reduce ('/' < REDUCE_PRIORITY).
    Conflict between rule 52 and token '%' resolved as reduce ('%' < REDUCE_PRIORITY).


State 60

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   53     | '-' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']

    $default  reduce using rule 53 (expr)

    Conflict between rule 53 and token KW_AND resolved as reduce (KW_AND < REDUCE_PRIORITY).
    Conflict between rule 53 and token KW_OR resolved as reduce (KW_OR < REDUCE_PRIORITY).
    Conflict between rule 53 and token POWER resolved as reduce (POWER < REDUCE_PRIORITY).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < REDUCE_PRIORITY).
    Conflict between rule 53 and token NEQ resolved as reduce (NEQ < REDUCE_PRIORITY).
    Conflict between rule 53 and token LT resolved as reduce (LT < REDUCE_PRIORITY).
    Conflict between rule 53 and token LE resolved as reduce (LE < REDUCE_PRIORITY).
    Conflict between rule 53 and token GT resolved as reduce (GT < REDUCE_PRIORITY).
    Conflict between rule 53 and token GE resolved as reduce (GE < REDUCE_PRIORITY).
    Conflict between rule 53 and token '+' resolved as reduce ('+' < REDUCE_PRIORITY).
    Conflict between rule 53 and token '-' resolved as reduce ('-' < REDUCE_PRIORITY).
    Conflict between rule 53 and token '*' resolved as reduce ('*' < REDUCE_PRIORITY).
    Conflict between rule 53 and token '/' resolved as reduce ('/' < REDUCE_PRIORITY).
    Conflict between rule 53 and token '%' resolved as reduce ('%' < REDUCE_PRIORITY).


State 61

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   54     | '(' expr . ')'

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    ')'     shift, and go to state 87


State 62

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   49     | expr KW_AND . expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 88
    value  go to state 46


State 63

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   50     | expr KW_OR . expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 89
    value  go to state 46


State 64

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   42     | expr POWER . expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 90
    value  go to state 46


State 65

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   43     | expr EQ . expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 91
    value  go to state 46


State 66

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   44     | expr NEQ . expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 92
    value  go to state 46


State 67

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   46     | expr LT . expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 93
    value  go to state 46


State 68

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   45     | expr LE . expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 94
    value  go to state 46


State 69

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   48     | expr GT . expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 95
    value  go to state 46


State 70

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   47     | expr GE . expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 96
    value  go to state 46


State 71

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   37     | expr '+' . expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 97
    value  go to state 46


State 72

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   38     | expr '-' . expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 98
    value  go to state 46


State 73

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   39     | expr '*' . expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 99
    value  go to state 46


State 74

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   40     | expr '/' . expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 100
    value  go to state 46


State 75

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   41     | expr '%' . expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 101
    value  go to state 46


State 76

   20 varAssignment: IDENTIFIER '[' INTEGER ']' .  [KW_INT, KW_STRING, KW_BOOL, ',']
   28 assignment: IDENTIFIER '[' INTEGER ']' . ASSIGN expr

    ASSIGN  shift, and go to state 102

    $default  reduce using rule 20 (varAssignment)


State 77

   29 assignment: IDENTIFIER '[' ']' ASSIGN . expr
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 103
    value  go to state 46


State 78

   28 assignment: IDENTIFIER '[' INTEGER ']' . ASSIGN expr

    ASSIGN  shift, and go to state 102


State 79

   25 functionParameters: IDENTIFIER dataType .

    $default  reduce using rule 25 (functionParameters)


State 80

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' . dataType '{' body '}'
   23                    | KW_FUNC IDENTIFIER '(' functionParameters ')' . dataType '{' body '}'
   59 dataType: . KW_INT
   60         | . KW_BOOL
   61         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    dataType  go to state 104


State 81

   26 functionParameters: functionParameters ',' . IDENTIFIER dataType

    IDENTIFIER  shift, and go to state 105


State 82

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' . '{' body '}'

    '{'  shift, and go to state 106


State 83

   35 expr: IDENTIFIER '(' ')' .

    $default  reduce using rule 35 (expr)


State 84

   31 functionInputs: functionInputs . ',' expr
   36 expr: IDENTIFIER '(' functionInputs . ')'

    ')'  shift, and go to state 107
    ','  shift, and go to state 108


State 85

   30 functionInputs: expr .  [')', ',']
   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 30 (functionInputs)


State 86

   34 expr: IDENTIFIER '[' expr . ']'
   37     | expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    ']'     shift, and go to state 109


State 87

   54 expr: '(' expr ')' .

    $default  reduce using rule 54 (expr)


State 88

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   49     | expr KW_AND expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, ')', ';', ',', ']']
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    EQ     shift, and go to state 65
    NEQ    shift, and go to state 66
    LT     shift, and go to state 67
    LE     shift, and go to state 68
    GT     shift, and go to state 69
    GE     shift, and go to state 70
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 49 (expr)

    Conflict between rule 49 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 49 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 49 and token POWER resolved as shift (KW_AND < POWER).
    Conflict between rule 49 and token EQ resolved as shift (KW_AND < EQ).
    Conflict between rule 49 and token NEQ resolved as shift (KW_AND < NEQ).
    Conflict between rule 49 and token LT resolved as shift (KW_AND < LT).
    Conflict between rule 49 and token LE resolved as shift (KW_AND < LE).
    Conflict between rule 49 and token GT resolved as shift (KW_AND < GT).
    Conflict between rule 49 and token GE resolved as shift (KW_AND < GE).
    Conflict between rule 49 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 49 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 49 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 49 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 49 and token '%' resolved as shift (KW_AND < '%').


State 89

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   50     | expr KW_OR expr .  [KW_INT, KW_STRING, KW_BOOL, KW_OR, ')', ';', ',', ']']

    KW_AND  shift, and go to state 62
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 50 (expr)

    Conflict between rule 50 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 50 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 50 and token POWER resolved as shift (KW_OR < POWER).
    Conflict between rule 50 and token EQ resolved as shift (KW_OR < EQ).
    Conflict between rule 50 and token NEQ resolved as shift (KW_OR < NEQ).
    Conflict between rule 50 and token LT resolved as shift (KW_OR < LT).
    Conflict between rule 50 and token LE resolved as shift (KW_OR < LE).
    Conflict between rule 50 and token GT resolved as shift (KW_OR < GT).
    Conflict between rule 50 and token GE resolved as shift (KW_OR < GE).
    Conflict between rule 50 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 50 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 50 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 50 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 50 and token '%' resolved as shift (KW_OR < '%').


State 90

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   42     | expr POWER expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 42 (expr)

    Conflict between rule 42 and token KW_AND resolved as reduce (KW_AND < POWER).
    Conflict between rule 42 and token KW_OR resolved as reduce (KW_OR < POWER).
    Conflict between rule 42 and token POWER resolved as shift (%right POWER).
    Conflict between rule 42 and token EQ resolved as reduce (EQ < POWER).
    Conflict between rule 42 and token NEQ resolved as reduce (NEQ < POWER).
    Conflict between rule 42 and token LT resolved as reduce (LT < POWER).
    Conflict between rule 42 and token LE resolved as reduce (LE < POWER).
    Conflict between rule 42 and token GT resolved as reduce (GT < POWER).
    Conflict between rule 42 and token GE resolved as reduce (GE < POWER).
    Conflict between rule 42 and token '+' resolved as shift (POWER < '+').
    Conflict between rule 42 and token '-' resolved as shift (POWER < '-').
    Conflict between rule 42 and token '*' resolved as shift (POWER < '*').
    Conflict between rule 42 and token '/' resolved as shift (POWER < '/').
    Conflict between rule 42 and token '%' resolved as shift (POWER < '%').


State 91

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   43     | expr EQ expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 43 (expr)

    Conflict between rule 43 and token KW_AND resolved as reduce (KW_AND < EQ).
    Conflict between rule 43 and token KW_OR resolved as reduce (KW_OR < EQ).
    Conflict between rule 43 and token POWER resolved as shift (EQ < POWER).
    Conflict between rule 43 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 43 and token NEQ resolved as reduce (NEQ < EQ).
    Conflict between rule 43 and token LT resolved as reduce (LT < EQ).
    Conflict between rule 43 and token LE resolved as reduce (LE < EQ).
    Conflict between rule 43 and token GT resolved as reduce (GT < EQ).
    Conflict between rule 43 and token GE resolved as reduce (GE < EQ).
    Conflict between rule 43 and token '+' resolved as shift (EQ < '+').
    Conflict between rule 43 and token '-' resolved as shift (EQ < '-').
    Conflict between rule 43 and token '*' resolved as shift (EQ < '*').
    Conflict between rule 43 and token '/' resolved as shift (EQ < '/').
    Conflict between rule 43 and token '%' resolved as shift (EQ < '%').


State 92

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   44     | expr NEQ expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, NEQ, ')', ';', ',', ']']
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    EQ     shift, and go to state 65
    LT     shift, and go to state 67
    LE     shift, and go to state 68
    GT     shift, and go to state 69
    GE     shift, and go to state 70
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 44 (expr)

    Conflict between rule 44 and token KW_AND resolved as reduce (KW_AND < NEQ).
    Conflict between rule 44 and token KW_OR resolved as reduce (KW_OR < NEQ).
    Conflict between rule 44 and token POWER resolved as shift (NEQ < POWER).
    Conflict between rule 44 and token EQ resolved as shift (NEQ < EQ).
    Conflict between rule 44 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 44 and token LT resolved as shift (NEQ < LT).
    Conflict between rule 44 and token LE resolved as shift (NEQ < LE).
    Conflict between rule 44 and token GT resolved as shift (NEQ < GT).
    Conflict between rule 44 and token GE resolved as shift (NEQ < GE).
    Conflict between rule 44 and token '+' resolved as shift (NEQ < '+').
    Conflict between rule 44 and token '-' resolved as shift (NEQ < '-').
    Conflict between rule 44 and token '*' resolved as shift (NEQ < '*').
    Conflict between rule 44 and token '/' resolved as shift (NEQ < '/').
    Conflict between rule 44 and token '%' resolved as shift (NEQ < '%').


State 93

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   46     | expr LT expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    EQ     shift, and go to state 65
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 46 (expr)

    Conflict between rule 46 and token KW_AND resolved as reduce (KW_AND < LT).
    Conflict between rule 46 and token KW_OR resolved as reduce (KW_OR < LT).
    Conflict between rule 46 and token POWER resolved as shift (LT < POWER).
    Conflict between rule 46 and token EQ resolved as shift (LT < EQ).
    Conflict between rule 46 and token NEQ resolved as reduce (NEQ < LT).
    Conflict between rule 46 and token LT resolved as reduce (%left LT).
    Conflict between rule 46 and token LE resolved as reduce (LE < LT).
    Conflict between rule 46 and token GT resolved as reduce (%left GT).
    Conflict between rule 46 and token GE resolved as reduce (GE < LT).
    Conflict between rule 46 and token '+' resolved as shift (LT < '+').
    Conflict between rule 46 and token '-' resolved as shift (LT < '-').
    Conflict between rule 46 and token '*' resolved as shift (LT < '*').
    Conflict between rule 46 and token '/' resolved as shift (LT < '/').
    Conflict between rule 46 and token '%' resolved as shift (LT < '%').


State 94

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   45     | expr LE expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, NEQ, LE, GE, ')', ';', ',', ']']
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    EQ     shift, and go to state 65
    LT     shift, and go to state 67
    GT     shift, and go to state 69
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 45 (expr)

    Conflict between rule 45 and token KW_AND resolved as reduce (KW_AND < LE).
    Conflict between rule 45 and token KW_OR resolved as reduce (KW_OR < LE).
    Conflict between rule 45 and token POWER resolved as shift (LE < POWER).
    Conflict between rule 45 and token EQ resolved as shift (LE < EQ).
    Conflict between rule 45 and token NEQ resolved as reduce (NEQ < LE).
    Conflict between rule 45 and token LT resolved as shift (LE < LT).
    Conflict between rule 45 and token LE resolved as reduce (%left LE).
    Conflict between rule 45 and token GT resolved as shift (LE < GT).
    Conflict between rule 45 and token GE resolved as reduce (%left GE).
    Conflict between rule 45 and token '+' resolved as shift (LE < '+').
    Conflict between rule 45 and token '-' resolved as shift (LE < '-').
    Conflict between rule 45 and token '*' resolved as shift (LE < '*').
    Conflict between rule 45 and token '/' resolved as shift (LE < '/').
    Conflict between rule 45 and token '%' resolved as shift (LE < '%').


State 95

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   48     | expr GT expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    EQ     shift, and go to state 65
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 48 (expr)

    Conflict between rule 48 and token KW_AND resolved as reduce (KW_AND < GT).
    Conflict between rule 48 and token KW_OR resolved as reduce (KW_OR < GT).
    Conflict between rule 48 and token POWER resolved as shift (GT < POWER).
    Conflict between rule 48 and token EQ resolved as shift (GT < EQ).
    Conflict between rule 48 and token NEQ resolved as reduce (NEQ < GT).
    Conflict between rule 48 and token LT resolved as reduce (%left LT).
    Conflict between rule 48 and token LE resolved as reduce (LE < GT).
    Conflict between rule 48 and token GT resolved as reduce (%left GT).
    Conflict between rule 48 and token GE resolved as reduce (GE < GT).
    Conflict between rule 48 and token '+' resolved as shift (GT < '+').
    Conflict between rule 48 and token '-' resolved as shift (GT < '-').
    Conflict between rule 48 and token '*' resolved as shift (GT < '*').
    Conflict between rule 48 and token '/' resolved as shift (GT < '/').
    Conflict between rule 48 and token '%' resolved as shift (GT < '%').


State 96

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   47     | expr GE expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, NEQ, LE, GE, ')', ';', ',', ']']
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    POWER  shift, and go to state 64
    EQ     shift, and go to state 65
    LT     shift, and go to state 67
    GT     shift, and go to state 69
    '+'    shift, and go to state 71
    '-'    shift, and go to state 72
    '*'    shift, and go to state 73
    '/'    shift, and go to state 74
    '%'    shift, and go to state 75

    $default  reduce using rule 47 (expr)

    Conflict between rule 47 and token KW_AND resolved as reduce (KW_AND < GE).
    Conflict between rule 47 and token KW_OR resolved as reduce (KW_OR < GE).
    Conflict between rule 47 and token POWER resolved as shift (GE < POWER).
    Conflict between rule 47 and token EQ resolved as shift (GE < EQ).
    Conflict between rule 47 and token NEQ resolved as reduce (NEQ < GE).
    Conflict between rule 47 and token LT resolved as shift (GE < LT).
    Conflict between rule 47 and token LE resolved as reduce (%left LE).
    Conflict between rule 47 and token GT resolved as shift (GE < GT).
    Conflict between rule 47 and token GE resolved as reduce (%left GE).
    Conflict between rule 47 and token '+' resolved as shift (GE < '+').
    Conflict between rule 47 and token '-' resolved as shift (GE < '-').
    Conflict between rule 47 and token '*' resolved as shift (GE < '*').
    Conflict between rule 47 and token '/' resolved as shift (GE < '/').
    Conflict between rule 47 and token '%' resolved as shift (GE < '%').


State 97

   37 expr: expr . '+' expr
   37     | expr '+' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 37 (expr)

    Conflict between rule 37 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 37 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 37 and token POWER resolved as reduce (POWER < '+').
    Conflict between rule 37 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 37 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 37 and token LT resolved as reduce (LT < '+').
    Conflict between rule 37 and token LE resolved as reduce (LE < '+').
    Conflict between rule 37 and token GT resolved as reduce (GT < '+').
    Conflict between rule 37 and token GE resolved as reduce (GE < '+').
    Conflict between rule 37 and token '+' resolved as shift (%right '+').
    Conflict between rule 37 and token '-' resolved as shift (%right '-').
    Conflict between rule 37 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 37 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 37 and token '%' resolved as shift ('+' < '%').


State 98

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   38     | expr '-' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 38 (expr)

    Conflict between rule 38 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 38 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 38 and token POWER resolved as reduce (POWER < '-').
    Conflict between rule 38 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 38 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 38 and token LT resolved as reduce (LT < '-').
    Conflict between rule 38 and token LE resolved as reduce (LE < '-').
    Conflict between rule 38 and token GT resolved as reduce (GT < '-').
    Conflict between rule 38 and token GE resolved as reduce (GE < '-').
    Conflict between rule 38 and token '+' resolved as shift (%right '+').
    Conflict between rule 38 and token '-' resolved as shift (%right '-').
    Conflict between rule 38 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 38 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 38 and token '%' resolved as shift ('-' < '%').


State 99

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   39     | expr '*' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    $default  reduce using rule 39 (expr)

    Conflict between rule 39 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 39 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 39 and token POWER resolved as reduce (POWER < '*').
    Conflict between rule 39 and token EQ resolved as reduce (EQ < '*').
    Conflict between rule 39 and token NEQ resolved as reduce (NEQ < '*').
    Conflict between rule 39 and token LT resolved as reduce (LT < '*').
    Conflict between rule 39 and token LE resolved as reduce (LE < '*').
    Conflict between rule 39 and token GT resolved as reduce (GT < '*').
    Conflict between rule 39 and token GE resolved as reduce (GE < '*').
    Conflict between rule 39 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 39 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 39 and token '*' resolved as reduce (%left '*').
    Conflict between rule 39 and token '/' resolved as reduce (%left '/').
    Conflict between rule 39 and token '%' resolved as reduce (%left '%').


State 100

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   40     | expr '/' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    $default  reduce using rule 40 (expr)

    Conflict between rule 40 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 40 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 40 and token POWER resolved as reduce (POWER < '/').
    Conflict between rule 40 and token EQ resolved as reduce (EQ < '/').
    Conflict between rule 40 and token NEQ resolved as reduce (NEQ < '/').
    Conflict between rule 40 and token LT resolved as reduce (LT < '/').
    Conflict between rule 40 and token LE resolved as reduce (LE < '/').
    Conflict between rule 40 and token GT resolved as reduce (GT < '/').
    Conflict between rule 40 and token GE resolved as reduce (GE < '/').
    Conflict between rule 40 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 40 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 40 and token '*' resolved as reduce (%left '*').
    Conflict between rule 40 and token '/' resolved as reduce (%left '/').
    Conflict between rule 40 and token '%' resolved as reduce (%left '%').


State 101

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   41     | expr '%' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    $default  reduce using rule 41 (expr)

    Conflict between rule 41 and token KW_AND resolved as reduce (KW_AND < '%').
    Conflict between rule 41 and token KW_OR resolved as reduce (KW_OR < '%').
    Conflict between rule 41 and token POWER resolved as reduce (POWER < '%').
    Conflict between rule 41 and token EQ resolved as reduce (EQ < '%').
    Conflict between rule 41 and token NEQ resolved as reduce (NEQ < '%').
    Conflict between rule 41 and token LT resolved as reduce (LT < '%').
    Conflict between rule 41 and token LE resolved as reduce (LE < '%').
    Conflict between rule 41 and token GT resolved as reduce (GT < '%').
    Conflict between rule 41 and token GE resolved as reduce (GE < '%').
    Conflict between rule 41 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 41 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 41 and token '*' resolved as reduce (%left '*').
    Conflict between rule 41 and token '/' resolved as reduce (%left '/').
    Conflict between rule 41 and token '%' resolved as reduce (%left '%').


State 102

   28 assignment: IDENTIFIER '[' INTEGER ']' ASSIGN . expr
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 110
    value  go to state 46


State 103

   29 assignment: IDENTIFIER '[' ']' ASSIGN expr .  [KW_INT, KW_STRING, KW_BOOL, ',']
   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 29 (assignment)


State 104

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType . '{' body '}'
   23                    | KW_FUNC IDENTIFIER '(' functionParameters ')' dataType . '{' body '}'

    '{'  shift, and go to state 111


State 105

   26 functionParameters: functionParameters ',' IDENTIFIER . dataType
   59 dataType: . KW_INT
   60         | . KW_BOOL
   61         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    dataType  go to state 112


State 106

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' . body '}'
    7 decl_list_body: . %empty
    8               | . decl_list_body declInsideBody
   11 body: . decl_list_body statementList

    $default  reduce using rule 7 (decl_list_body)

    decl_list_body  go to state 113
    body            go to state 114


State 107

   36 expr: IDENTIFIER '(' functionInputs ')' .

    $default  reduce using rule 36 (expr)


State 108

   31 functionInputs: functionInputs ',' . expr
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 115
    value  go to state 46


State 109

   34 expr: IDENTIFIER '[' expr ']' .

    $default  reduce using rule 34 (expr)


State 110

   28 assignment: IDENTIFIER '[' INTEGER ']' ASSIGN expr .  [KW_INT, KW_STRING, KW_BOOL, ',']
   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 28 (assignment)


State 111

    7 decl_list_body: . %empty
    8               | . decl_list_body declInsideBody
   11 body: . decl_list_body statementList
   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' . body '}'
   23                    | KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' . body '}'

    $default  reduce using rule 7 (decl_list_body)

    decl_list_body  go to state 113
    body            go to state 116


State 112

   26 functionParameters: functionParameters ',' IDENTIFIER dataType .

    $default  reduce using rule 26 (functionParameters)


State 113

    8 decl_list_body: decl_list_body . declInsideBody
    9 declInsideBody: . constDeclaration ';'
   10               | . varDeclaration ';'
   11 body: decl_list_body . statementList
   12 constDeclaration: . KW_CONST constAssignments dataType
   15 varDeclaration: . KW_VAR varAssignments dataType
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   62 statementList: . statementComplex
   63              | . statementList statementComplex
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_VAR       shift, and go to state 1
    KW_CONST     shift, and go to state 2
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    declInsideBody           go to state 126
    constDeclaration         go to state 127
    varDeclaration           go to state 128
    expr                     go to state 129
    value                    go to state 46
    statementList            go to state 130
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 132
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 114

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body . '}'

    '}'  shift, and go to state 137


State 115

   31 functionInputs: functionInputs ',' expr .  [')', ',']
   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 31 (functionInputs)


State 116

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body . '}'
   23                    | KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body . '}'

    '}'  shift, and go to state 138


State 117

   79 statementIf: KW_IF . '(' expr ')' statementComplex
   80            | KW_IF . '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | KW_IF . '(' expr ')' statementComplex KW_ELSE statementIf

    '('  shift, and go to state 139


State 118

   77 statementFor: KW_FOR . '(' statement ';' expr ';' statement ')' statementComplex

    '('  shift, and go to state 140


State 119

   78 statementWhile: KW_WHILE . '(' expr ')' statementComplex

    '('  shift, and go to state 141


State 120

   69 statementComplexMinusIf: KW_BREAK . ';'

    ';'  shift, and go to state 142


State 121

   70 statementComplexMinusIf: KW_CONTINUE . ';'

    ';'  shift, and go to state 143


State 122

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   71 statementComplexMinusIf: KW_RETURN . expr ';'
   72                        | KW_RETURN . ';'

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44
    ';'         shift, and go to state 144

    expr   go to state 145
    value  go to state 46


State 123

   33 expr: IDENTIFIER .  [KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';']
   34     | IDENTIFIER . '[' expr ']'
   35     | IDENTIFIER . '(' ')'
   36     | IDENTIFIER . '(' functionInputs ')'
   75 statement: IDENTIFIER . ASSIGN expr

    ASSIGN  shift, and go to state 146
    '('     shift, and go to state 57
    '['     shift, and go to state 58

    $default  reduce using rule 33 (expr)


State 124

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   62 statementList: . statementComplex
   63              | . statementList statementComplex
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   66                        | '{' . statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    expr                     go to state 129
    value                    go to state 46
    statementList            go to state 147
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 132
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 125

   64 statementComplexMinusIf: ';' .

    $default  reduce using rule 64 (statementComplexMinusIf)


State 126

    8 decl_list_body: decl_list_body declInsideBody .

    $default  reduce using rule 8 (decl_list_body)


State 127

    9 declInsideBody: constDeclaration . ';'

    ';'  shift, and go to state 148


State 128

   10 declInsideBody: varDeclaration . ';'

    ';'  shift, and go to state 149


State 129

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   76 statement: expr .  [')', ';']

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 76 (statement)


State 130

   11 body: decl_list_body statementList .  ['}']
   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   63 statementList: statementList . statementComplex
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    $default  reduce using rule 11 (body)

    expr                     go to state 129
    value                    go to state 46
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 150
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 131

   74 statementComplex: statementComplexMinusIf .

    $default  reduce using rule 74 (statementComplex)


State 132

   62 statementList: statementComplex .

    $default  reduce using rule 62 (statementList)


State 133

   65 statementComplexMinusIf: statement . ';'

    ';'  shift, and go to state 151


State 134

   67 statementComplexMinusIf: statementFor .

    $default  reduce using rule 67 (statementComplexMinusIf)


State 135

   68 statementComplexMinusIf: statementWhile .

    $default  reduce using rule 68 (statementComplexMinusIf)


State 136

   73 statementComplex: statementIf .

    $default  reduce using rule 73 (statementComplex)


State 137

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}' .

    $default  reduce using rule 1 (program)


State 138

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}' .  [';']
   23                    | KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}' .  [';']

    ';'       reduce using rule 22 (functionDeclaration)
    ';'       [reduce using rule 23 (functionDeclaration)]
    $default  reduce using rule 22 (functionDeclaration)


State 139

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   79 statementIf: KW_IF '(' . expr ')' statementComplex
   80            | KW_IF '(' . expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | KW_IF '(' . expr ')' statementComplex KW_ELSE statementIf

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 152
    value  go to state 46


State 140

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: KW_FOR '(' . statement ';' expr ';' statement ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 123
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr       go to state 129
    value      go to state 46
    statement  go to state 153


State 141

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   78 statementWhile: KW_WHILE '(' . expr ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 154
    value  go to state 46


State 142

   69 statementComplexMinusIf: KW_BREAK ';' .

    $default  reduce using rule 69 (statementComplexMinusIf)


State 143

   70 statementComplexMinusIf: KW_CONTINUE ';' .

    $default  reduce using rule 70 (statementComplexMinusIf)


State 144

   72 statementComplexMinusIf: KW_RETURN ';' .

    $default  reduce using rule 72 (statementComplexMinusIf)


State 145

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   71 statementComplexMinusIf: KW_RETURN expr . ';'

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    ';'     shift, and go to state 155


State 146

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   75 statement: IDENTIFIER ASSIGN . expr

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 156
    value  go to state 46


State 147

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   63 statementList: statementList . statementComplex
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   66                        | '{' statementList . '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    '}'          shift, and go to state 157
    ';'          shift, and go to state 125

    expr                     go to state 129
    value                    go to state 46
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 150
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 148

    9 declInsideBody: constDeclaration ';' .

    $default  reduce using rule 9 (declInsideBody)


State 149

   10 declInsideBody: varDeclaration ';' .

    $default  reduce using rule 10 (declInsideBody)


State 150

   63 statementList: statementList statementComplex .

    $default  reduce using rule 63 (statementList)


State 151

   65 statementComplexMinusIf: statement ';' .

    $default  reduce using rule 65 (statementComplexMinusIf)


State 152

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   79 statementIf: KW_IF '(' expr . ')' statementComplex
   80            | KW_IF '(' expr . ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | KW_IF '(' expr . ')' statementComplex KW_ELSE statementIf

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    ')'     shift, and go to state 158


State 153

   77 statementFor: KW_FOR '(' statement . ';' expr ';' statement ')' statementComplex

    ';'  shift, and go to state 159


State 154

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   78 statementWhile: KW_WHILE '(' expr . ')' statementComplex

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    ')'     shift, and go to state 160


State 155

   71 statementComplexMinusIf: KW_RETURN expr ';' .

    $default  reduce using rule 71 (statementComplexMinusIf)


State 156

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   75 statement: IDENTIFIER ASSIGN expr .  [')', ';']

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75

    $default  reduce using rule 75 (statement)


State 157

   66 statementComplexMinusIf: '{' statementList '}' .

    $default  reduce using rule 66 (statementComplexMinusIf)


State 158

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   79            | KW_IF '(' expr ')' . statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   80            | KW_IF '(' expr ')' . statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf
   81            | KW_IF '(' expr ')' . statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    expr                     go to state 129
    value                    go to state 46
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 161
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 159

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   77 statementFor: KW_FOR '(' statement ';' . expr ';' statement ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr   go to state 162
    value  go to state 46


State 160

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   78               | KW_WHILE '(' expr ')' . statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    expr                     go to state 129
    value                    go to state 46
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 163
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 161

   79 statementIf: KW_IF '(' expr ')' statementComplex .  [BOOL, KW_IF, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_NOT, KW_RETURN, STRING, INTEGER, REAL, IDENTIFIER, '+', '-', '(', '{', '}', ';']
   80            | KW_IF '(' expr ')' statementComplex . KW_ELSE statementComplexMinusIf
   81            | KW_IF '(' expr ')' statementComplex . KW_ELSE statementIf

    KW_ELSE  shift, and go to state 164

    $default  reduce using rule 79 (statementIf)

    Conflict between rule 79 and token KW_ELSE resolved as shift (')' < KW_ELSE).


State 162

   37 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | expr . '*' expr
   40     | expr . '/' expr
   41     | expr . '%' expr
   42     | expr . POWER expr
   43     | expr . EQ expr
   44     | expr . NEQ expr
   45     | expr . LE expr
   46     | expr . LT expr
   47     | expr . GE expr
   48     | expr . GT expr
   49     | expr . KW_AND expr
   50     | expr . KW_OR expr
   77 statementFor: KW_FOR '(' statement ';' expr . ';' statement ')' statementComplex

    KW_AND  shift, and go to state 62
    KW_OR   shift, and go to state 63
    POWER   shift, and go to state 64
    EQ      shift, and go to state 65
    NEQ     shift, and go to state 66
    LT      shift, and go to state 67
    LE      shift, and go to state 68
    GT      shift, and go to state 69
    GE      shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    ';'     shift, and go to state 165


State 163

   78 statementWhile: KW_WHILE '(' expr ')' statementComplex .

    $default  reduce using rule 78 (statementWhile)


State 164

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   80            | KW_IF '(' expr ')' statementComplex KW_ELSE . statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf
   81            | KW_IF '(' expr ')' statementComplex KW_ELSE . statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    expr                     go to state 129
    value                    go to state 46
    statementComplexMinusIf  go to state 166
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 167


State 165

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: KW_FOR '(' statement ';' expr ';' . statement ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 123
    '+'         shift, and go to state 42
    '-'         shift, and go to state 43
    '('         shift, and go to state 44

    expr       go to state 129
    value      go to state 46
    statement  go to state 168


State 166

   80 statementIf: KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf .

    $default  reduce using rule 80 (statementIf)


State 167

   81 statementIf: KW_IF '(' expr ')' statementComplex KW_ELSE statementIf .

    $default  reduce using rule 81 (statementIf)


State 168

   77 statementFor: KW_FOR '(' statement ';' expr ';' statement . ')' statementComplex

    ')'  shift, and go to state 169


State 169

   32 expr: . value
   33     | . IDENTIFIER
   34     | . IDENTIFIER '[' expr ']'
   35     | . IDENTIFIER '(' ')'
   36     | . IDENTIFIER '(' functionInputs ')'
   37     | . expr '+' expr
   38     | . expr '-' expr
   39     | . expr '*' expr
   40     | . expr '/' expr
   41     | . expr '%' expr
   42     | . expr POWER expr
   43     | . expr EQ expr
   44     | . expr NEQ expr
   45     | . expr LE expr
   46     | . expr LT expr
   47     | . expr GE expr
   48     | . expr GT expr
   49     | . expr KW_AND expr
   50     | . expr KW_OR expr
   51     | . KW_NOT expr
   52     | . '+' expr
   53     | . '-' expr
   54     | . '(' expr ')'
   55 value: . INTEGER
   56      | . BOOL
   57      | . REAL
   58      | . STRING
   64 statementComplexMinusIf: . ';'
   65                        | . statement ';'
   66                        | . '{' statementList '}'
   67                        | . statementFor
   68                        | . statementWhile
   69                        | . KW_BREAK ';'
   70                        | . KW_CONTINUE ';'
   71                        | . KW_RETURN expr ';'
   72                        | . KW_RETURN ';'
   73 statementComplex: . statementIf
   74                 | . statementComplexMinusIf
   75 statement: . IDENTIFIER ASSIGN expr
   76          | . expr
   77 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   77             | KW_FOR '(' statement ';' expr ';' statement ')' . statementComplex
   78 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   79 statementIf: . KW_IF '(' expr ')' statementComplex
   80            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementComplexMinusIf
   81            | . KW_IF '(' expr ')' statementComplex KW_ELSE statementIf

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 117
    KW_FOR       shift, and go to state 118
    KW_WHILE     shift, and go to state 119
    KW_BREAK     shift, and go to state 120
    KW_CONTINUE  shift, and go to state 121
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 122
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 123
    '+'          shift, and go to state 42
    '-'          shift, and go to state 43
    '('          shift, and go to state 44
    '{'          shift, and go to state 124
    ';'          shift, and go to state 125

    expr                     go to state 129
    value                    go to state 46
    statementComplexMinusIf  go to state 131
    statementComplex         go to state 170
    statement                go to state 133
    statementFor             go to state 134
    statementWhile           go to state 135
    statementIf              go to state 136


State 170

   77 statementFor: KW_FOR '(' statement ';' expr ';' statement ')' statementComplex .

    $default  reduce using rule 77 (statementFor)
