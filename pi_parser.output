Terminals unused in grammar

    KW_REAL
    KW_NIL


State 131 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}'

    2 decl_list: decl_list decl
    3          | decl

    4 decl: constDeclaration ';'
    5     | varDeclaration ';'
    6     | functionDeclaration ';'

    7 decl_list_body: %empty
    8               | decl_list_body declInsideBody

    9 declInsideBody: constDeclaration ';'
   10               | varDeclaration ';'

   11 body: decl_list_body statementList

   12 constDeclaration: KW_CONST constAssignments dataType

   13 constAssignments: assignment
   14                 | constAssignments ',' assignment

   15 varDeclaration: KW_VAR varAssignments dataType

   16 varAssignments: varAssignment
   17               | varAssignments ',' varAssignment

   18 varAssignment: assignment
   19              | IDENTIFIER
   20              | IDENTIFIER '[' INTEGER ']'
   21              | IDENTIFIER '[' ']'

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

   23 functionParameters: %empty
   24                   | IDENTIFIER dataType
   25                   | functionParameters ',' IDENTIFIER dataType

   26 assignment: IDENTIFIER ASSIGN expr
   27           | IDENTIFIER '[' INTEGER ']' ASSIGN expr
   28           | IDENTIFIER '[' ']' ASSIGN expr

   29 functionInputs: expr
   30               | functionInputs ',' expr

   31 expr: value
   32     | IDENTIFIER
   33     | IDENTIFIER '[' expr ']'
   34     | IDENTIFIER '(' ')'
   35     | IDENTIFIER '(' functionInputs ')'
   36     | expr '+' expr
   37     | expr '-' expr
   38     | expr '*' expr
   39     | expr '/' expr
   40     | expr '%' expr
   41     | expr POWER expr
   42     | expr EQ expr
   43     | expr NEQ expr
   44     | expr LE expr
   45     | expr LT expr
   46     | expr GE expr
   47     | expr GT expr
   48     | expr KW_AND expr
   49     | expr KW_OR expr
   50     | KW_NOT expr
   51     | '(' expr ')'

   52 value: INTEGER
   53      | BOOL
   54      | REAL
   55      | STRING

   56 dataType: KW_INT
   57         | KW_BOOL
   58         | KW_STRING

   59 statementList: statementComplex
   60              | statementList statementComplex

   61 statementComplex: ';'
   62                 | statement ';'
   63                 | '{' statementList '}'
   64                 | statementFor
   65                 | statementWhile
   66                 | statementIf
   67                 | KW_BREAK ';'
   68                 | KW_CONTINUE ';'
   69                 | KW_RETURN expr ';'
   70                 | KW_RETURN ';'

   71 statement: IDENTIFIER ASSIGN expr
   72          | expr

   73 statementFor: KW_FOR '(' statement ';' expr ';' statement ')' statementComplex

   74 statementWhile: KW_WHILE '(' expr ')' statementComplex

   75 statementIf: KW_IF '(' expr ')' statementComplex
   76            | statementIf KW_ELSE statementComplex


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 40
    '(' (40) 1 22 34 35 51 73 74 75
    ')' (41) 1 22 34 35 51 73 74 75
    '*' (42) 38
    '+' (43) 36
    ',' (44) 14 17 25 30
    '-' (45) 37
    '/' (47) 39
    ';' (59) 4 5 6 9 10 61 62 67 68 69 70 73
    '[' (91) 20 21 27 28 33
    ']' (93) 20 21 27 28 33
    '{' (123) 1 22 63
    '}' (125) 1 22 63
    error (256)
    KW_INT (258) 56
    KW_REAL (259)
    KW_STRING (260) 58
    KW_BOOL (261) 57
    BOOL <crepr> (262) 53
    KW_VAR (263) 15
    KW_CONST (264) 12
    KW_IF (265) 75
    KW_ELSE (266) 76
    KW_FOR (267) 73
    KW_WHILE (268) 74
    KW_BREAK (269) 67
    KW_CONTINUE (270) 68
    KW_FUNC (271) 1 22
    KW_NIL (272)
    KW_AND (273) 48
    KW_OR (274) 49
    KW_NOT (275) 50
    KW_RETURN (276) 69 70
    KW_BEGIN (277) 1
    ASSIGN (278) 26 27 28 71
    STRING <crepr> (279) 55
    INTEGER <crepr> (280) 20 27 52
    REAL <crepr> (281) 54
    IDENTIFIER <crepr> (282) 19 20 21 22 24 25 26 27 28 32 33 34 35 71
    POWER (283) 41
    EQ (284) 42
    NEQ (285) 43
    LT (286) 45
    LE (287) 44
    GT (288) 47
    GE (289) 46


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1
        on right: 0
    decl_list <crepr> (50)
        on left: 2 3
        on right: 1 2
    decl <crepr> (51)
        on left: 4 5 6
        on right: 2 3
    decl_list_body <crepr> (52)
        on left: 7 8
        on right: 8 11
    declInsideBody <crepr> (53)
        on left: 9 10
        on right: 8
    body <crepr> (54)
        on left: 11
        on right: 1 22
    constDeclaration <crepr> (55)
        on left: 12
        on right: 4 9
    constAssignments <crepr> (56)
        on left: 13 14
        on right: 12 14
    varDeclaration <crepr> (57)
        on left: 15
        on right: 5 10
    varAssignments <crepr> (58)
        on left: 16 17
        on right: 15 17
    varAssignment <crepr> (59)
        on left: 18 19 20 21
        on right: 16 17
    functionDeclaration <crepr> (60)
        on left: 22
        on right: 6
    functionParameters <crepr> (61)
        on left: 23 24 25
        on right: 22 25
    assignment <crepr> (62)
        on left: 26 27 28
        on right: 13 14 18
    functionInputs <crepr> (63)
        on left: 29 30
        on right: 30 35
    expr <crepr> (64)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 26 27 28 29 30 33 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 69 71 72 73 74 75
    value <crepr> (65)
        on left: 52 53 54 55
        on right: 31
    dataType <crepr> (66)
        on left: 56 57 58
        on right: 12 15 22 24 25
    statementList <crepr> (67)
        on left: 59 60
        on right: 11 60 63
    statementComplex <crepr> (68)
        on left: 61 62 63 64 65 66 67 68 69 70
        on right: 59 60 73 74 75 76
    statement <crepr> (69)
        on left: 71 72
        on right: 62 73
    statementFor <crepr> (70)
        on left: 73
        on right: 64
    statementWhile <crepr> (71)
        on left: 74
        on right: 65
    statementIf <crepr> (72)
        on left: 75 76
        on right: 66 76


State 0

    0 $accept: . program $end
    1 program: . decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}'
    2 decl_list: . decl_list decl
    3          | . decl
    4 decl: . constDeclaration ';'
    5     | . varDeclaration ';'
    6     | . functionDeclaration ';'
   12 constDeclaration: . KW_CONST constAssignments dataType
   15 varDeclaration: . KW_VAR varAssignments dataType
   22 functionDeclaration: . KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    KW_VAR    shift, and go to state 1
    KW_CONST  shift, and go to state 2
    KW_FUNC   shift, and go to state 3

    program              go to state 4
    decl_list            go to state 5
    decl                 go to state 6
    constDeclaration     go to state 7
    varDeclaration       go to state 8
    functionDeclaration  go to state 9


State 1

   15 varDeclaration: KW_VAR . varAssignments dataType
   16 varAssignments: . varAssignment
   17               | . varAssignments ',' varAssignment
   18 varAssignment: . assignment
   19              | . IDENTIFIER
   20              | . IDENTIFIER '[' INTEGER ']'
   21              | . IDENTIFIER '[' ']'
   26 assignment: . IDENTIFIER ASSIGN expr
   27           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   28           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 10

    varAssignments  go to state 11
    varAssignment   go to state 12
    assignment      go to state 13


State 2

   12 constDeclaration: KW_CONST . constAssignments dataType
   13 constAssignments: . assignment
   14                 | . constAssignments ',' assignment
   26 assignment: . IDENTIFIER ASSIGN expr
   27           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   28           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 14

    constAssignments  go to state 15
    assignment        go to state 16


State 3

   22 functionDeclaration: KW_FUNC . IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    IDENTIFIER  shift, and go to state 17


State 4

    0 $accept: program . $end

    $end  shift, and go to state 18


State 5

    1 program: decl_list . KW_FUNC KW_BEGIN '(' ')' '{' body '}'
    2 decl_list: decl_list . decl
    4 decl: . constDeclaration ';'
    5     | . varDeclaration ';'
    6     | . functionDeclaration ';'
   12 constDeclaration: . KW_CONST constAssignments dataType
   15 varDeclaration: . KW_VAR varAssignments dataType
   22 functionDeclaration: . KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    KW_VAR    shift, and go to state 1
    KW_CONST  shift, and go to state 2
    KW_FUNC   shift, and go to state 19

    decl                 go to state 20
    constDeclaration     go to state 7
    varDeclaration       go to state 8
    functionDeclaration  go to state 9


State 6

    3 decl_list: decl .

    $default  reduce using rule 3 (decl_list)


State 7

    4 decl: constDeclaration . ';'

    ';'  shift, and go to state 21


State 8

    5 decl: varDeclaration . ';'

    ';'  shift, and go to state 22


State 9

    6 decl: functionDeclaration . ';'

    ';'  shift, and go to state 23


State 10

   19 varAssignment: IDENTIFIER .  [KW_INT, KW_STRING, KW_BOOL, ',']
   20              | IDENTIFIER . '[' INTEGER ']'
   21              | IDENTIFIER . '[' ']'
   26 assignment: IDENTIFIER . ASSIGN expr
   27           | IDENTIFIER . '[' INTEGER ']' ASSIGN expr
   28           | IDENTIFIER . '[' ']' ASSIGN expr

    ASSIGN  shift, and go to state 24
    '['     shift, and go to state 25

    $default  reduce using rule 19 (varAssignment)


State 11

   15 varDeclaration: KW_VAR varAssignments . dataType
   17 varAssignments: varAssignments . ',' varAssignment
   56 dataType: . KW_INT
   57         | . KW_BOOL
   58         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28
    ','        shift, and go to state 29

    dataType  go to state 30


State 12

   16 varAssignments: varAssignment .

    $default  reduce using rule 16 (varAssignments)


State 13

   18 varAssignment: assignment .

    $default  reduce using rule 18 (varAssignment)


State 14

   26 assignment: IDENTIFIER . ASSIGN expr
   27           | IDENTIFIER . '[' INTEGER ']' ASSIGN expr
   28           | IDENTIFIER . '[' ']' ASSIGN expr

    ASSIGN  shift, and go to state 24
    '['     shift, and go to state 31


State 15

   12 constDeclaration: KW_CONST constAssignments . dataType
   14 constAssignments: constAssignments . ',' assignment
   56 dataType: . KW_INT
   57         | . KW_BOOL
   58         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28
    ','        shift, and go to state 32

    dataType  go to state 33


State 16

   13 constAssignments: assignment .

    $default  reduce using rule 13 (constAssignments)


State 17

   22 functionDeclaration: KW_FUNC IDENTIFIER . '(' functionParameters ')' dataType '{' body '}'

    '('  shift, and go to state 34


State 18

    0 $accept: program $end .

    $default  accept


State 19

    1 program: decl_list KW_FUNC . KW_BEGIN '(' ')' '{' body '}'
   22 functionDeclaration: KW_FUNC . IDENTIFIER '(' functionParameters ')' dataType '{' body '}'

    KW_BEGIN    shift, and go to state 35
    IDENTIFIER  shift, and go to state 17


State 20

    2 decl_list: decl_list decl .

    $default  reduce using rule 2 (decl_list)


State 21

    4 decl: constDeclaration ';' .

    $default  reduce using rule 4 (decl)


State 22

    5 decl: varDeclaration ';' .

    $default  reduce using rule 5 (decl)


State 23

    6 decl: functionDeclaration ';' .

    $default  reduce using rule 6 (decl)


State 24

   26 assignment: IDENTIFIER ASSIGN . expr
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 43
    value  go to state 44


State 25

   20 varAssignment: IDENTIFIER '[' . INTEGER ']'
   21              | IDENTIFIER '[' . ']'
   27 assignment: IDENTIFIER '[' . INTEGER ']' ASSIGN expr
   28           | IDENTIFIER '[' . ']' ASSIGN expr

    INTEGER  shift, and go to state 45
    ']'      shift, and go to state 46


State 26

   56 dataType: KW_INT .

    $default  reduce using rule 56 (dataType)


State 27

   58 dataType: KW_STRING .

    $default  reduce using rule 58 (dataType)


State 28

   57 dataType: KW_BOOL .

    $default  reduce using rule 57 (dataType)


State 29

   17 varAssignments: varAssignments ',' . varAssignment
   18 varAssignment: . assignment
   19              | . IDENTIFIER
   20              | . IDENTIFIER '[' INTEGER ']'
   21              | . IDENTIFIER '[' ']'
   26 assignment: . IDENTIFIER ASSIGN expr
   27           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   28           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 10

    varAssignment  go to state 47
    assignment     go to state 13


State 30

   15 varDeclaration: KW_VAR varAssignments dataType .

    $default  reduce using rule 15 (varDeclaration)


State 31

   27 assignment: IDENTIFIER '[' . INTEGER ']' ASSIGN expr
   28           | IDENTIFIER '[' . ']' ASSIGN expr

    INTEGER  shift, and go to state 48
    ']'      shift, and go to state 49


State 32

   14 constAssignments: constAssignments ',' . assignment
   26 assignment: . IDENTIFIER ASSIGN expr
   27           | . IDENTIFIER '[' INTEGER ']' ASSIGN expr
   28           | . IDENTIFIER '[' ']' ASSIGN expr

    IDENTIFIER  shift, and go to state 14

    assignment  go to state 50


State 33

   12 constDeclaration: KW_CONST constAssignments dataType .

    $default  reduce using rule 12 (constDeclaration)


State 34

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' . functionParameters ')' dataType '{' body '}'
   23 functionParameters: . %empty  [')', ',']
   24                   | . IDENTIFIER dataType
   25                   | . functionParameters ',' IDENTIFIER dataType

    IDENTIFIER  shift, and go to state 51

    $default  reduce using rule 23 (functionParameters)

    functionParameters  go to state 52


State 35

    1 program: decl_list KW_FUNC KW_BEGIN . '(' ')' '{' body '}'

    '('  shift, and go to state 53


State 36

   53 value: BOOL .

    $default  reduce using rule 53 (value)


State 37

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   50     | KW_NOT . expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 54
    value  go to state 44


State 38

   55 value: STRING .

    $default  reduce using rule 55 (value)


State 39

   52 value: INTEGER .

    $default  reduce using rule 52 (value)


State 40

   54 value: REAL .

    $default  reduce using rule 54 (value)


State 41

   32 expr: IDENTIFIER .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   33     | IDENTIFIER . '[' expr ']'
   34     | IDENTIFIER . '(' ')'
   35     | IDENTIFIER . '(' functionInputs ')'

    '('  shift, and go to state 55
    '['  shift, and go to state 56

    $default  reduce using rule 32 (expr)


State 42

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   51     | '(' . expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 57
    value  go to state 44


State 43

   26 assignment: IDENTIFIER ASSIGN expr .  [KW_INT, KW_STRING, KW_BOOL, ',']
   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 26 (assignment)


State 44

   31 expr: value .

    $default  reduce using rule 31 (expr)


State 45

   20 varAssignment: IDENTIFIER '[' INTEGER . ']'
   27 assignment: IDENTIFIER '[' INTEGER . ']' ASSIGN expr

    ']'  shift, and go to state 72


State 46

   21 varAssignment: IDENTIFIER '[' ']' .  [KW_INT, KW_STRING, KW_BOOL, ',']
   28 assignment: IDENTIFIER '[' ']' . ASSIGN expr

    ASSIGN  shift, and go to state 73

    $default  reduce using rule 21 (varAssignment)


State 47

   17 varAssignments: varAssignments ',' varAssignment .

    $default  reduce using rule 17 (varAssignments)


State 48

   27 assignment: IDENTIFIER '[' INTEGER . ']' ASSIGN expr

    ']'  shift, and go to state 74


State 49

   28 assignment: IDENTIFIER '[' ']' . ASSIGN expr

    ASSIGN  shift, and go to state 73


State 50

   14 constAssignments: constAssignments ',' assignment .

    $default  reduce using rule 14 (constAssignments)


State 51

   24 functionParameters: IDENTIFIER . dataType
   56 dataType: . KW_INT
   57         | . KW_BOOL
   58         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    dataType  go to state 75


State 52

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters . ')' dataType '{' body '}'
   25 functionParameters: functionParameters . ',' IDENTIFIER dataType

    ')'  shift, and go to state 76
    ','  shift, and go to state 77


State 53

    1 program: decl_list KW_FUNC KW_BEGIN '(' . ')' '{' body '}'

    ')'  shift, and go to state 78


State 54

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   50     | KW_NOT expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']

    $default  reduce using rule 50 (expr)

    Conflict between rule 50 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 50 and token KW_OR resolved as reduce (KW_OR < KW_NOT).
    Conflict between rule 50 and token POWER resolved as reduce (POWER < KW_NOT).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < KW_NOT).
    Conflict between rule 50 and token NEQ resolved as reduce (NEQ < KW_NOT).
    Conflict between rule 50 and token LT resolved as reduce (LT < KW_NOT).
    Conflict between rule 50 and token LE resolved as reduce (LE < KW_NOT).
    Conflict between rule 50 and token GT resolved as reduce (GT < KW_NOT).
    Conflict between rule 50 and token GE resolved as reduce (GE < KW_NOT).
    Conflict between rule 50 and token '+' resolved as reduce ('+' < KW_NOT).
    Conflict between rule 50 and token '-' resolved as reduce ('-' < KW_NOT).
    Conflict between rule 50 and token '*' resolved as reduce ('*' < KW_NOT).
    Conflict between rule 50 and token '/' resolved as reduce ('/' < KW_NOT).
    Conflict between rule 50 and token '%' resolved as reduce ('%' < KW_NOT).


State 55

   29 functionInputs: . expr
   30               | . functionInputs ',' expr
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   34     | IDENTIFIER '(' . ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   35     | IDENTIFIER '(' . functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42
    ')'         shift, and go to state 79

    functionInputs  go to state 80
    expr            go to state 81
    value           go to state 44


State 56

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   33     | IDENTIFIER '[' . expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 82
    value  go to state 44


State 57

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   51     | '(' expr . ')'

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71
    ')'     shift, and go to state 83


State 58

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   48     | expr KW_AND . expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 84
    value  go to state 44


State 59

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   49     | expr KW_OR . expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 85
    value  go to state 44


State 60

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   41     | expr POWER . expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 86
    value  go to state 44


State 61

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   42     | expr EQ . expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 87
    value  go to state 44


State 62

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   43     | expr NEQ . expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 88
    value  go to state 44


State 63

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   45     | expr LT . expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 89
    value  go to state 44


State 64

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   44     | expr LE . expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 90
    value  go to state 44


State 65

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   47     | expr GT . expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 91
    value  go to state 44


State 66

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   46     | expr GE . expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 92
    value  go to state 44


State 67

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   36     | expr '+' . expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 93
    value  go to state 44


State 68

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   37     | expr '-' . expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 94
    value  go to state 44


State 69

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   38     | expr '*' . expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 95
    value  go to state 44


State 70

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   39     | expr '/' . expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 96
    value  go to state 44


State 71

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   40     | expr '%' . expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 97
    value  go to state 44


State 72

   20 varAssignment: IDENTIFIER '[' INTEGER ']' .  [KW_INT, KW_STRING, KW_BOOL, ',']
   27 assignment: IDENTIFIER '[' INTEGER ']' . ASSIGN expr

    ASSIGN  shift, and go to state 98

    $default  reduce using rule 20 (varAssignment)


State 73

   28 assignment: IDENTIFIER '[' ']' ASSIGN . expr
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 99
    value  go to state 44


State 74

   27 assignment: IDENTIFIER '[' INTEGER ']' . ASSIGN expr

    ASSIGN  shift, and go to state 98


State 75

   24 functionParameters: IDENTIFIER dataType .

    $default  reduce using rule 24 (functionParameters)


State 76

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' . dataType '{' body '}'
   56 dataType: . KW_INT
   57         | . KW_BOOL
   58         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    dataType  go to state 100


State 77

   25 functionParameters: functionParameters ',' . IDENTIFIER dataType

    IDENTIFIER  shift, and go to state 101


State 78

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' . '{' body '}'

    '{'  shift, and go to state 102


State 79

   34 expr: IDENTIFIER '(' ')' .

    $default  reduce using rule 34 (expr)


State 80

   30 functionInputs: functionInputs . ',' expr
   35 expr: IDENTIFIER '(' functionInputs . ')'

    ')'  shift, and go to state 103
    ','  shift, and go to state 104


State 81

   29 functionInputs: expr .  [')', ',']
   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 29 (functionInputs)


State 82

   33 expr: IDENTIFIER '[' expr . ']'
   36     | expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71
    ']'     shift, and go to state 105


State 83

   51 expr: '(' expr ')' .

    $default  reduce using rule 51 (expr)


State 84

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   48     | expr KW_AND expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, ')', ';', ',', ']']
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    EQ     shift, and go to state 61
    NEQ    shift, and go to state 62
    LT     shift, and go to state 63
    LE     shift, and go to state 64
    GT     shift, and go to state 65
    GE     shift, and go to state 66
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 48 (expr)

    Conflict between rule 48 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 48 and token KW_OR resolved as reduce (KW_OR < KW_AND).
    Conflict between rule 48 and token POWER resolved as shift (KW_AND < POWER).
    Conflict between rule 48 and token EQ resolved as shift (KW_AND < EQ).
    Conflict between rule 48 and token NEQ resolved as shift (KW_AND < NEQ).
    Conflict between rule 48 and token LT resolved as shift (KW_AND < LT).
    Conflict between rule 48 and token LE resolved as shift (KW_AND < LE).
    Conflict between rule 48 and token GT resolved as shift (KW_AND < GT).
    Conflict between rule 48 and token GE resolved as shift (KW_AND < GE).
    Conflict between rule 48 and token '+' resolved as shift (KW_AND < '+').
    Conflict between rule 48 and token '-' resolved as shift (KW_AND < '-').
    Conflict between rule 48 and token '*' resolved as shift (KW_AND < '*').
    Conflict between rule 48 and token '/' resolved as shift (KW_AND < '/').
    Conflict between rule 48 and token '%' resolved as shift (KW_AND < '%').


State 85

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   49     | expr KW_OR expr .  [KW_INT, KW_STRING, KW_BOOL, KW_OR, ')', ';', ',', ']']

    KW_AND  shift, and go to state 58
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 49 (expr)

    Conflict between rule 49 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 49 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 49 and token POWER resolved as shift (KW_OR < POWER).
    Conflict between rule 49 and token EQ resolved as shift (KW_OR < EQ).
    Conflict between rule 49 and token NEQ resolved as shift (KW_OR < NEQ).
    Conflict between rule 49 and token LT resolved as shift (KW_OR < LT).
    Conflict between rule 49 and token LE resolved as shift (KW_OR < LE).
    Conflict between rule 49 and token GT resolved as shift (KW_OR < GT).
    Conflict between rule 49 and token GE resolved as shift (KW_OR < GE).
    Conflict between rule 49 and token '+' resolved as shift (KW_OR < '+').
    Conflict between rule 49 and token '-' resolved as shift (KW_OR < '-').
    Conflict between rule 49 and token '*' resolved as shift (KW_OR < '*').
    Conflict between rule 49 and token '/' resolved as shift (KW_OR < '/').
    Conflict between rule 49 and token '%' resolved as shift (KW_OR < '%').


State 86

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   41     | expr POWER expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60

    $default  reduce using rule 41 (expr)

    Conflict between rule 41 and token KW_AND resolved as reduce (KW_AND < POWER).
    Conflict between rule 41 and token KW_OR resolved as reduce (KW_OR < POWER).
    Conflict between rule 41 and token POWER resolved as shift (%right POWER).
    Conflict between rule 41 and token EQ resolved as reduce (EQ < POWER).
    Conflict between rule 41 and token NEQ resolved as reduce (NEQ < POWER).
    Conflict between rule 41 and token LT resolved as reduce (LT < POWER).
    Conflict between rule 41 and token LE resolved as reduce (LE < POWER).
    Conflict between rule 41 and token GT resolved as reduce (GT < POWER).
    Conflict between rule 41 and token GE resolved as reduce (GE < POWER).
    Conflict between rule 41 and token '+' resolved as reduce ('+' < POWER).
    Conflict between rule 41 and token '-' resolved as reduce ('-' < POWER).
    Conflict between rule 41 and token '*' resolved as reduce ('*' < POWER).
    Conflict between rule 41 and token '/' resolved as reduce ('/' < POWER).
    Conflict between rule 41 and token '%' resolved as reduce ('%' < POWER).


State 87

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   42     | expr EQ expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 42 (expr)

    Conflict between rule 42 and token KW_AND resolved as reduce (KW_AND < EQ).
    Conflict between rule 42 and token KW_OR resolved as reduce (KW_OR < EQ).
    Conflict between rule 42 and token POWER resolved as shift (EQ < POWER).
    Conflict between rule 42 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 42 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 42 and token LT resolved as reduce (%left LT).
    Conflict between rule 42 and token LE resolved as reduce (%left LE).
    Conflict between rule 42 and token GT resolved as reduce (%left GT).
    Conflict between rule 42 and token GE resolved as reduce (%left GE).
    Conflict between rule 42 and token '+' resolved as shift (EQ < '+').
    Conflict between rule 42 and token '-' resolved as shift (EQ < '-').
    Conflict between rule 42 and token '*' resolved as shift (EQ < '*').
    Conflict between rule 42 and token '/' resolved as shift (EQ < '/').
    Conflict between rule 42 and token '%' resolved as shift (EQ < '%').


State 88

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   43     | expr NEQ expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 43 (expr)

    Conflict between rule 43 and token KW_AND resolved as reduce (KW_AND < NEQ).
    Conflict between rule 43 and token KW_OR resolved as reduce (KW_OR < NEQ).
    Conflict between rule 43 and token POWER resolved as shift (NEQ < POWER).
    Conflict between rule 43 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 43 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 43 and token LT resolved as reduce (%left LT).
    Conflict between rule 43 and token LE resolved as reduce (%left LE).
    Conflict between rule 43 and token GT resolved as reduce (%left GT).
    Conflict between rule 43 and token GE resolved as reduce (%left GE).
    Conflict between rule 43 and token '+' resolved as shift (NEQ < '+').
    Conflict between rule 43 and token '-' resolved as shift (NEQ < '-').
    Conflict between rule 43 and token '*' resolved as shift (NEQ < '*').
    Conflict between rule 43 and token '/' resolved as shift (NEQ < '/').
    Conflict between rule 43 and token '%' resolved as shift (NEQ < '%').


State 89

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   45     | expr LT expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 45 (expr)

    Conflict between rule 45 and token KW_AND resolved as reduce (KW_AND < LT).
    Conflict between rule 45 and token KW_OR resolved as reduce (KW_OR < LT).
    Conflict between rule 45 and token POWER resolved as shift (LT < POWER).
    Conflict between rule 45 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 45 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 45 and token LT resolved as reduce (%left LT).
    Conflict between rule 45 and token LE resolved as reduce (%left LE).
    Conflict between rule 45 and token GT resolved as reduce (%left GT).
    Conflict between rule 45 and token GE resolved as reduce (%left GE).
    Conflict between rule 45 and token '+' resolved as shift (LT < '+').
    Conflict between rule 45 and token '-' resolved as shift (LT < '-').
    Conflict between rule 45 and token '*' resolved as shift (LT < '*').
    Conflict between rule 45 and token '/' resolved as shift (LT < '/').
    Conflict between rule 45 and token '%' resolved as shift (LT < '%').


State 90

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   44     | expr LE expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 44 (expr)

    Conflict between rule 44 and token KW_AND resolved as reduce (KW_AND < LE).
    Conflict between rule 44 and token KW_OR resolved as reduce (KW_OR < LE).
    Conflict between rule 44 and token POWER resolved as shift (LE < POWER).
    Conflict between rule 44 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 44 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 44 and token LT resolved as reduce (%left LT).
    Conflict between rule 44 and token LE resolved as reduce (%left LE).
    Conflict between rule 44 and token GT resolved as reduce (%left GT).
    Conflict between rule 44 and token GE resolved as reduce (%left GE).
    Conflict between rule 44 and token '+' resolved as shift (LE < '+').
    Conflict between rule 44 and token '-' resolved as shift (LE < '-').
    Conflict between rule 44 and token '*' resolved as shift (LE < '*').
    Conflict between rule 44 and token '/' resolved as shift (LE < '/').
    Conflict between rule 44 and token '%' resolved as shift (LE < '%').


State 91

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   47     | expr GT expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 47 (expr)

    Conflict between rule 47 and token KW_AND resolved as reduce (KW_AND < GT).
    Conflict between rule 47 and token KW_OR resolved as reduce (KW_OR < GT).
    Conflict between rule 47 and token POWER resolved as shift (GT < POWER).
    Conflict between rule 47 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 47 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 47 and token LT resolved as reduce (%left LT).
    Conflict between rule 47 and token LE resolved as reduce (%left LE).
    Conflict between rule 47 and token GT resolved as reduce (%left GT).
    Conflict between rule 47 and token GE resolved as reduce (%left GE).
    Conflict between rule 47 and token '+' resolved as shift (GT < '+').
    Conflict between rule 47 and token '-' resolved as shift (GT < '-').
    Conflict between rule 47 and token '*' resolved as shift (GT < '*').
    Conflict between rule 47 and token '/' resolved as shift (GT < '/').
    Conflict between rule 47 and token '%' resolved as shift (GT < '%').


State 92

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   46     | expr GE expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, ')', ';', ',', ']']
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '+'    shift, and go to state 67
    '-'    shift, and go to state 68
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 46 (expr)

    Conflict between rule 46 and token KW_AND resolved as reduce (KW_AND < GE).
    Conflict between rule 46 and token KW_OR resolved as reduce (KW_OR < GE).
    Conflict between rule 46 and token POWER resolved as shift (GE < POWER).
    Conflict between rule 46 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 46 and token NEQ resolved as reduce (%left NEQ).
    Conflict between rule 46 and token LT resolved as reduce (%left LT).
    Conflict between rule 46 and token LE resolved as reduce (%left LE).
    Conflict between rule 46 and token GT resolved as reduce (%left GT).
    Conflict between rule 46 and token GE resolved as reduce (%left GE).
    Conflict between rule 46 and token '+' resolved as shift (GE < '+').
    Conflict between rule 46 and token '-' resolved as shift (GE < '-').
    Conflict between rule 46 and token '*' resolved as shift (GE < '*').
    Conflict between rule 46 and token '/' resolved as shift (GE < '/').
    Conflict between rule 46 and token '%' resolved as shift (GE < '%').


State 93

   36 expr: expr . '+' expr
   36     | expr '+' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, '+', '-', ')', ';', ',', ']']
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 36 (expr)

    Conflict between rule 36 and token KW_AND resolved as reduce (KW_AND < '+').
    Conflict between rule 36 and token KW_OR resolved as reduce (KW_OR < '+').
    Conflict between rule 36 and token POWER resolved as shift ('+' < POWER).
    Conflict between rule 36 and token EQ resolved as reduce (EQ < '+').
    Conflict between rule 36 and token NEQ resolved as reduce (NEQ < '+').
    Conflict between rule 36 and token LT resolved as reduce (LT < '+').
    Conflict between rule 36 and token LE resolved as reduce (LE < '+').
    Conflict between rule 36 and token GT resolved as reduce (GT < '+').
    Conflict between rule 36 and token GE resolved as reduce (GE < '+').
    Conflict between rule 36 and token '+' resolved as reduce (%left '+').
    Conflict between rule 36 and token '-' resolved as reduce (%left '-').
    Conflict between rule 36 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 36 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 36 and token '%' resolved as shift ('+' < '%').


State 94

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   37     | expr '-' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, '+', '-', ')', ';', ',', ']']
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60
    '*'    shift, and go to state 69
    '/'    shift, and go to state 70
    '%'    shift, and go to state 71

    $default  reduce using rule 37 (expr)

    Conflict between rule 37 and token KW_AND resolved as reduce (KW_AND < '-').
    Conflict between rule 37 and token KW_OR resolved as reduce (KW_OR < '-').
    Conflict between rule 37 and token POWER resolved as shift ('-' < POWER).
    Conflict between rule 37 and token EQ resolved as reduce (EQ < '-').
    Conflict between rule 37 and token NEQ resolved as reduce (NEQ < '-').
    Conflict between rule 37 and token LT resolved as reduce (LT < '-').
    Conflict between rule 37 and token LE resolved as reduce (LE < '-').
    Conflict between rule 37 and token GT resolved as reduce (GT < '-').
    Conflict between rule 37 and token GE resolved as reduce (GE < '-').
    Conflict between rule 37 and token '+' resolved as reduce (%left '+').
    Conflict between rule 37 and token '-' resolved as reduce (%left '-').
    Conflict between rule 37 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 37 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 37 and token '%' resolved as shift ('-' < '%').


State 95

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   38     | expr '*' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60

    $default  reduce using rule 38 (expr)

    Conflict between rule 38 and token KW_AND resolved as reduce (KW_AND < '*').
    Conflict between rule 38 and token KW_OR resolved as reduce (KW_OR < '*').
    Conflict between rule 38 and token POWER resolved as shift ('*' < POWER).
    Conflict between rule 38 and token EQ resolved as reduce (EQ < '*').
    Conflict between rule 38 and token NEQ resolved as reduce (NEQ < '*').
    Conflict between rule 38 and token LT resolved as reduce (LT < '*').
    Conflict between rule 38 and token LE resolved as reduce (LE < '*').
    Conflict between rule 38 and token GT resolved as reduce (GT < '*').
    Conflict between rule 38 and token GE resolved as reduce (GE < '*').
    Conflict between rule 38 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 38 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 38 and token '*' resolved as reduce (%left '*').
    Conflict between rule 38 and token '/' resolved as reduce (%left '/').
    Conflict between rule 38 and token '%' resolved as reduce (%left '%').


State 96

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   39     | expr '/' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60

    $default  reduce using rule 39 (expr)

    Conflict between rule 39 and token KW_AND resolved as reduce (KW_AND < '/').
    Conflict between rule 39 and token KW_OR resolved as reduce (KW_OR < '/').
    Conflict between rule 39 and token POWER resolved as shift ('/' < POWER).
    Conflict between rule 39 and token EQ resolved as reduce (EQ < '/').
    Conflict between rule 39 and token NEQ resolved as reduce (NEQ < '/').
    Conflict between rule 39 and token LT resolved as reduce (LT < '/').
    Conflict between rule 39 and token LE resolved as reduce (LE < '/').
    Conflict between rule 39 and token GT resolved as reduce (GT < '/').
    Conflict between rule 39 and token GE resolved as reduce (GE < '/').
    Conflict between rule 39 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 39 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 39 and token '*' resolved as reduce (%left '*').
    Conflict between rule 39 and token '/' resolved as reduce (%left '/').
    Conflict between rule 39 and token '%' resolved as reduce (%left '%').


State 97

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   40     | expr '%' expr .  [KW_INT, KW_STRING, KW_BOOL, KW_AND, KW_OR, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';', ',', ']']
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    POWER  shift, and go to state 60

    $default  reduce using rule 40 (expr)

    Conflict between rule 40 and token KW_AND resolved as reduce (KW_AND < '%').
    Conflict between rule 40 and token KW_OR resolved as reduce (KW_OR < '%').
    Conflict between rule 40 and token POWER resolved as shift ('%' < POWER).
    Conflict between rule 40 and token EQ resolved as reduce (EQ < '%').
    Conflict between rule 40 and token NEQ resolved as reduce (NEQ < '%').
    Conflict between rule 40 and token LT resolved as reduce (LT < '%').
    Conflict between rule 40 and token LE resolved as reduce (LE < '%').
    Conflict between rule 40 and token GT resolved as reduce (GT < '%').
    Conflict between rule 40 and token GE resolved as reduce (GE < '%').
    Conflict between rule 40 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 40 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 40 and token '*' resolved as reduce (%left '*').
    Conflict between rule 40 and token '/' resolved as reduce (%left '/').
    Conflict between rule 40 and token '%' resolved as reduce (%left '%').


State 98

   27 assignment: IDENTIFIER '[' INTEGER ']' ASSIGN . expr
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 106
    value  go to state 44


State 99

   28 assignment: IDENTIFIER '[' ']' ASSIGN expr .  [KW_INT, KW_STRING, KW_BOOL, ',']
   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 28 (assignment)


State 100

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType . '{' body '}'

    '{'  shift, and go to state 107


State 101

   25 functionParameters: functionParameters ',' IDENTIFIER . dataType
   56 dataType: . KW_INT
   57         | . KW_BOOL
   58         | . KW_STRING

    KW_INT     shift, and go to state 26
    KW_STRING  shift, and go to state 27
    KW_BOOL    shift, and go to state 28

    dataType  go to state 108


State 102

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' . body '}'
    7 decl_list_body: . %empty
    8               | . decl_list_body declInsideBody
   11 body: . decl_list_body statementList

    $default  reduce using rule 7 (decl_list_body)

    decl_list_body  go to state 109
    body            go to state 110


State 103

   35 expr: IDENTIFIER '(' functionInputs ')' .

    $default  reduce using rule 35 (expr)


State 104

   30 functionInputs: functionInputs ',' . expr
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 111
    value  go to state 44


State 105

   33 expr: IDENTIFIER '[' expr ']' .

    $default  reduce using rule 33 (expr)


State 106

   27 assignment: IDENTIFIER '[' INTEGER ']' ASSIGN expr .  [KW_INT, KW_STRING, KW_BOOL, ',']
   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 27 (assignment)


State 107

    7 decl_list_body: . %empty
    8               | . decl_list_body declInsideBody
   11 body: . decl_list_body statementList
   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' . body '}'

    $default  reduce using rule 7 (decl_list_body)

    decl_list_body  go to state 109
    body            go to state 112


State 108

   25 functionParameters: functionParameters ',' IDENTIFIER dataType .

    $default  reduce using rule 25 (functionParameters)


State 109

    8 decl_list_body: decl_list_body . declInsideBody
    9 declInsideBody: . constDeclaration ';'
   10               | . varDeclaration ';'
   11 body: decl_list_body . statementList
   12 constDeclaration: . KW_CONST constAssignments dataType
   15 varDeclaration: . KW_VAR varAssignments dataType
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   59 statementList: . statementComplex
   60              | . statementList statementComplex
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_VAR       shift, and go to state 1
    KW_CONST     shift, and go to state 2
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    declInsideBody    go to state 122
    constDeclaration  go to state 123
    varDeclaration    go to state 124
    expr              go to state 125
    value             go to state 44
    statementList     go to state 126
    statementComplex  go to state 127
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 110

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body . '}'

    '}'  shift, and go to state 132


State 111

   30 functionInputs: functionInputs ',' expr .  [')', ',']
   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 30 (functionInputs)


State 112

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body . '}'

    '}'  shift, and go to state 133


State 113

   75 statementIf: KW_IF . '(' expr ')' statementComplex

    '('  shift, and go to state 134


State 114

   73 statementFor: KW_FOR . '(' statement ';' expr ';' statement ')' statementComplex

    '('  shift, and go to state 135


State 115

   74 statementWhile: KW_WHILE . '(' expr ')' statementComplex

    '('  shift, and go to state 136


State 116

   67 statementComplex: KW_BREAK . ';'

    ';'  shift, and go to state 137


State 117

   68 statementComplex: KW_CONTINUE . ';'

    ';'  shift, and go to state 138


State 118

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   69 statementComplex: KW_RETURN . expr ';'
   70                 | KW_RETURN . ';'

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42
    ';'         shift, and go to state 139

    expr   go to state 140
    value  go to state 44


State 119

   32 expr: IDENTIFIER .  [KW_AND, KW_OR, POWER, EQ, NEQ, LT, LE, GT, GE, '+', '-', '*', '/', '%', ')', ';']
   33     | IDENTIFIER . '[' expr ']'
   34     | IDENTIFIER . '(' ')'
   35     | IDENTIFIER . '(' functionInputs ')'
   71 statement: IDENTIFIER . ASSIGN expr

    ASSIGN  shift, and go to state 141
    '('     shift, and go to state 55
    '['     shift, and go to state 56

    $default  reduce using rule 32 (expr)


State 120

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   59 statementList: . statementComplex
   60              | . statementList statementComplex
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   63                 | '{' . statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    expr              go to state 125
    value             go to state 44
    statementList     go to state 142
    statementComplex  go to state 127
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 121

   61 statementComplex: ';' .

    $default  reduce using rule 61 (statementComplex)


State 122

    8 decl_list_body: decl_list_body declInsideBody .

    $default  reduce using rule 8 (decl_list_body)


State 123

    9 declInsideBody: constDeclaration . ';'

    ';'  shift, and go to state 143


State 124

   10 declInsideBody: varDeclaration . ';'

    ';'  shift, and go to state 144


State 125

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   72 statement: expr .  [')', ';']

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 72 (statement)


State 126

   11 body: decl_list_body statementList .  ['}']
   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   60 statementList: statementList . statementComplex
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    $default  reduce using rule 11 (body)

    expr              go to state 125
    value             go to state 44
    statementComplex  go to state 145
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 127

   59 statementList: statementComplex .

    $default  reduce using rule 59 (statementList)


State 128

   62 statementComplex: statement . ';'

    ';'  shift, and go to state 146


State 129

   64 statementComplex: statementFor .

    $default  reduce using rule 64 (statementComplex)


State 130

   65 statementComplex: statementWhile .

    $default  reduce using rule 65 (statementComplex)


State 131

   66 statementComplex: statementIf .  [BOOL, KW_IF, KW_ELSE, KW_FOR, KW_WHILE, KW_BREAK, KW_CONTINUE, KW_NOT, KW_RETURN, STRING, INTEGER, REAL, IDENTIFIER, '(', '{', '}', ';']
   76 statementIf: statementIf . KW_ELSE statementComplex

    KW_ELSE  shift, and go to state 147

    KW_ELSE   [reduce using rule 66 (statementComplex)]
    $default  reduce using rule 66 (statementComplex)


State 132

    1 program: decl_list KW_FUNC KW_BEGIN '(' ')' '{' body '}' .

    $default  reduce using rule 1 (program)


State 133

   22 functionDeclaration: KW_FUNC IDENTIFIER '(' functionParameters ')' dataType '{' body '}' .

    $default  reduce using rule 22 (functionDeclaration)


State 134

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   75 statementIf: KW_IF '(' . expr ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 148
    value  go to state 44


State 135

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: KW_FOR '(' . statement ';' expr ';' statement ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 119
    '('         shift, and go to state 42

    expr       go to state 125
    value      go to state 44
    statement  go to state 149


State 136

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   74 statementWhile: KW_WHILE '(' . expr ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 150
    value  go to state 44


State 137

   67 statementComplex: KW_BREAK ';' .

    $default  reduce using rule 67 (statementComplex)


State 138

   68 statementComplex: KW_CONTINUE ';' .

    $default  reduce using rule 68 (statementComplex)


State 139

   70 statementComplex: KW_RETURN ';' .

    $default  reduce using rule 70 (statementComplex)


State 140

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   69 statementComplex: KW_RETURN expr . ';'

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71
    ';'     shift, and go to state 151


State 141

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   71 statement: IDENTIFIER ASSIGN . expr

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 152
    value  go to state 44


State 142

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   60 statementList: statementList . statementComplex
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   63                 | '{' statementList . '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    '}'          shift, and go to state 153
    ';'          shift, and go to state 121

    expr              go to state 125
    value             go to state 44
    statementComplex  go to state 145
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 143

    9 declInsideBody: constDeclaration ';' .

    $default  reduce using rule 9 (declInsideBody)


State 144

   10 declInsideBody: varDeclaration ';' .

    $default  reduce using rule 10 (declInsideBody)


State 145

   60 statementList: statementList statementComplex .

    $default  reduce using rule 60 (statementList)


State 146

   62 statementComplex: statement ';' .

    $default  reduce using rule 62 (statementComplex)


State 147

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex
   76            | statementIf KW_ELSE . statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    expr              go to state 125
    value             go to state 44
    statementComplex  go to state 154
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 148

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   75 statementIf: KW_IF '(' expr . ')' statementComplex

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71
    ')'     shift, and go to state 155


State 149

   73 statementFor: KW_FOR '(' statement . ';' expr ';' statement ')' statementComplex

    ';'  shift, and go to state 156


State 150

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   74 statementWhile: KW_WHILE '(' expr . ')' statementComplex

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71
    ')'     shift, and go to state 157


State 151

   69 statementComplex: KW_RETURN expr ';' .

    $default  reduce using rule 69 (statementComplex)


State 152

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   71 statement: IDENTIFIER ASSIGN expr .  [')', ';']

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71

    $default  reduce using rule 71 (statement)


State 153

   63 statementComplex: '{' statementList '}' .

    $default  reduce using rule 63 (statementComplex)


State 154

   76 statementIf: statementIf KW_ELSE statementComplex .

    $default  reduce using rule 76 (statementIf)


State 155

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   75            | KW_IF '(' expr ')' . statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    expr              go to state 125
    value             go to state 44
    statementComplex  go to state 158
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 156

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   73 statementFor: KW_FOR '(' statement ';' . expr ';' statement ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 41
    '('         shift, and go to state 42

    expr   go to state 159
    value  go to state 44


State 157

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   74               | KW_WHILE '(' expr ')' . statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    expr              go to state 125
    value             go to state 44
    statementComplex  go to state 160
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 158

   75 statementIf: KW_IF '(' expr ')' statementComplex .

    $default  reduce using rule 75 (statementIf)


State 159

   36 expr: expr . '+' expr
   37     | expr . '-' expr
   38     | expr . '*' expr
   39     | expr . '/' expr
   40     | expr . '%' expr
   41     | expr . POWER expr
   42     | expr . EQ expr
   43     | expr . NEQ expr
   44     | expr . LE expr
   45     | expr . LT expr
   46     | expr . GE expr
   47     | expr . GT expr
   48     | expr . KW_AND expr
   49     | expr . KW_OR expr
   73 statementFor: KW_FOR '(' statement ';' expr . ';' statement ')' statementComplex

    KW_AND  shift, and go to state 58
    KW_OR   shift, and go to state 59
    POWER   shift, and go to state 60
    EQ      shift, and go to state 61
    NEQ     shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    '+'     shift, and go to state 67
    '-'     shift, and go to state 68
    '*'     shift, and go to state 69
    '/'     shift, and go to state 70
    '%'     shift, and go to state 71
    ';'     shift, and go to state 161


State 160

   74 statementWhile: KW_WHILE '(' expr ')' statementComplex .

    $default  reduce using rule 74 (statementWhile)


State 161

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: KW_FOR '(' statement ';' expr ';' . statement ')' statementComplex

    BOOL        shift, and go to state 36
    KW_NOT      shift, and go to state 37
    STRING      shift, and go to state 38
    INTEGER     shift, and go to state 39
    REAL        shift, and go to state 40
    IDENTIFIER  shift, and go to state 119
    '('         shift, and go to state 42

    expr       go to state 125
    value      go to state 44
    statement  go to state 162


State 162

   73 statementFor: KW_FOR '(' statement ';' expr ';' statement . ')' statementComplex

    ')'  shift, and go to state 163


State 163

   31 expr: . value
   32     | . IDENTIFIER
   33     | . IDENTIFIER '[' expr ']'
   34     | . IDENTIFIER '(' ')'
   35     | . IDENTIFIER '(' functionInputs ')'
   36     | . expr '+' expr
   37     | . expr '-' expr
   38     | . expr '*' expr
   39     | . expr '/' expr
   40     | . expr '%' expr
   41     | . expr POWER expr
   42     | . expr EQ expr
   43     | . expr NEQ expr
   44     | . expr LE expr
   45     | . expr LT expr
   46     | . expr GE expr
   47     | . expr GT expr
   48     | . expr KW_AND expr
   49     | . expr KW_OR expr
   50     | . KW_NOT expr
   51     | . '(' expr ')'
   52 value: . INTEGER
   53      | . BOOL
   54      | . REAL
   55      | . STRING
   61 statementComplex: . ';'
   62                 | . statement ';'
   63                 | . '{' statementList '}'
   64                 | . statementFor
   65                 | . statementWhile
   66                 | . statementIf
   67                 | . KW_BREAK ';'
   68                 | . KW_CONTINUE ';'
   69                 | . KW_RETURN expr ';'
   70                 | . KW_RETURN ';'
   71 statement: . IDENTIFIER ASSIGN expr
   72          | . expr
   73 statementFor: . KW_FOR '(' statement ';' expr ';' statement ')' statementComplex
   73             | KW_FOR '(' statement ';' expr ';' statement ')' . statementComplex
   74 statementWhile: . KW_WHILE '(' expr ')' statementComplex
   75 statementIf: . KW_IF '(' expr ')' statementComplex
   76            | . statementIf KW_ELSE statementComplex

    BOOL         shift, and go to state 36
    KW_IF        shift, and go to state 113
    KW_FOR       shift, and go to state 114
    KW_WHILE     shift, and go to state 115
    KW_BREAK     shift, and go to state 116
    KW_CONTINUE  shift, and go to state 117
    KW_NOT       shift, and go to state 37
    KW_RETURN    shift, and go to state 118
    STRING       shift, and go to state 38
    INTEGER      shift, and go to state 39
    REAL         shift, and go to state 40
    IDENTIFIER   shift, and go to state 119
    '('          shift, and go to state 42
    '{'          shift, and go to state 120
    ';'          shift, and go to state 121

    expr              go to state 125
    value             go to state 44
    statementComplex  go to state 164
    statement         go to state 128
    statementFor      go to state 129
    statementWhile    go to state 130
    statementIf       go to state 131


State 164

   73 statementFor: KW_FOR '(' statement ';' expr ';' statement ')' statementComplex .

    $default  reduce using rule 73 (statementFor)
